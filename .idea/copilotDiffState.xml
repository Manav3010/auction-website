<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# Auction Website&#10;&#10;## Overview&#10;This is a microservices-based auction platform built with Spring Boot. It allows users to register, log in, and participate in online auctions. The system is designed for scalability, security, and maintainability, using modern cloud-native patterns.&#10;&#10;## Architecture&#10;The project consists of several microservices:&#10;- **User Service**: Manages user registration, authentication, and profile data.&#10;- **Auction Service**: Handles auction creation, bidding, and auction lifecycle.&#10;- **Scheduler Service**: Manages scheduled tasks, such as auto-closing auctions and event notifications.&#10;- **API Gateway**: Routes requests to appropriate services and provides a single entry point.&#10;- **Eureka Server**: Service registry for microservices discovery.&#10;- **Config Server**: Centralized configuration management for all services.&#10;&#10;## Technologies Used&#10;- Java 17+&#10;- Spring Boot&#10;- Spring Cloud (Eureka, Config Server, Gateway)&#10;- RabbitMQ (for event-driven communication)&#10;- PostgreSQL (database)&#10;- Log4j2 (logging)&#10;- Maven (build tool)&#10;- Docker (recommended for deployment)&#10;&#10;## Features&#10;- User registration and login&#10;- Role-based access control&#10;- Auction creation and bidding&#10;- Scheduled auction expiry&#10;- Event-driven architecture (RabbitMQ)&#10;- Centralized configuration&#10;- Service discovery&#10;- API Gateway routing&#10;&#10;## Getting Started&#10;### Prerequisites&#10;- Java 17+&#10;- Maven&#10;- PostgreSQL&#10;- RabbitMQ&#10;- Docker (optional)&#10;&#10;### Setup Instructions&#10;1. **Clone the repository**&#10;   ```bash&#10;   git clone https://github.com/yourusername/auction-website.git&#10;   cd auction-website&#10;   ```&#10;2. **Configure the database**&#10;   - Create the database using `dbscript.sql`.&#10;   - Update `postgres.properties` in each service with your DB credentials.&#10;3. **Start RabbitMQ**&#10;   - Ensure RabbitMQ is running locally or update connection settings.&#10;4. **Start Eureka Server**&#10;   - Navigate to `eureka/` and run:&#10;     ```bash&#10;     mvn spring-boot:run&#10;     ```&#10;5. **Start Config Server**&#10;   - Navigate to `configserver/` and run:&#10;     ```bash&#10;     mvn spring-boot:run&#10;     ```&#10;6. **Start Other Services**&#10;   - Start each service (`userservice`, `auctionservice`, `schedularservice`, `gateway`) similarly.&#10;7. **Access the API Gateway**&#10;   - The gateway will be available at `http://localhost:&lt;gateway-port&gt;`.&#10;&#10;## Development&#10;- Each microservice has its own `pom.xml` and can be developed independently.&#10;- Configuration is managed centrally via the config server.&#10;- Logging is configured via Log4j2.&#10;- Use the provided `HELP.md` files in each service for service-specific details.&#10;&#10;## Testing&#10;- Unit and integration tests are located in the `test/` directories of each service.&#10;- Run tests with:&#10;  ```bash&#10;  mvn test&#10;  ```&#10;&#10;## Contributing&#10;Contributions are welcome! Please open issues or submit pull requests for improvements, bug fixes, or new features.&#10;&#10;## License&#10;This project is licensed under the MIT License.&#10;&#10;## Contact&#10;For questions or support, open an issue or contact the maintainer at [your-email@example.com].&#10;&#10;---&#10;&#10;**Note:** See `TODO list.txt` for planned features and improvements, including Keycloak integration, Kafka events, and more advanced auction features.&#10;&#10;" />
              <option name="updatedContent" value="# Auction Website&#10;&#10;## Overview&#10;This is a microservices-based auction platform built with Spring Boot. It allows users to register, log in, and participate in online auctions. The system is designed for scalability, security, and maintainability, using modern cloud-native patterns.&#10;&#10;## Architecture&#10;The project consists of several microservices:&#10;- **User Service**: Manages user registration, authentication, and profile data.&#10;- **Auction Service**: Handles auction creation, bidding, and auction lifecycle.&#10;- **Scheduler Service**: Manages scheduled tasks, such as auto-closing auctions and event notifications.&#10;- **API Gateway**: Routes requests to appropriate services and provides a single entry point.&#10;- **Eureka Server**: Service registry for microservices discovery.&#10;- **Config Server**: Centralized configuration management for all services.&#10;&#10;## Technologies Used&#10;- Java 17+&#10;- Spring Boot&#10;- Spring Cloud (Eureka, Config Server, Gateway)&#10;- RabbitMQ (for event-driven communication)&#10;- PostgreSQL (database)&#10;- Log4j2 (logging)&#10;- Maven (build tool)&#10;- Docker (recommended for deployment)&#10;&#10;## Features&#10;- User registration and login&#10;- Role-based access control&#10;- Auction creation and bidding&#10;- Scheduled auction expiry&#10;- Event-driven architecture (RabbitMQ)&#10;- Centralized configuration&#10;- Service discovery&#10;- API Gateway routing&#10;&#10;## Getting Started&#10;### Prerequisites&#10;- Java 17+&#10;- Maven&#10;- PostgreSQL&#10;- RabbitMQ&#10;- Docker (optional)&#10;&#10;### Setup Instructions&#10;1. **Clone the repository**&#10;   ```bash&#10;   git clone https://github.com/yourusername/auction-website.git&#10;   cd auction-website&#10;   ```&#10;2. **Configure the database**&#10;   - Create the database using `dbscript.sql`.&#10;   - Update `postgres.properties` in each service with your DB credentials.&#10;3. **Start RabbitMQ**&#10;   - Ensure RabbitMQ is running locally or update connection settings.&#10;4. **Start Eureka Server**&#10;   - Navigate to `eureka/` and run:&#10;     ```bash&#10;     mvn spring-boot:run&#10;     ```&#10;5. **Start Config Server**&#10;   - Navigate to `configserver/` and run:&#10;     ```bash&#10;     mvn spring-boot:run&#10;     ```&#10;6. **Start Other Services**&#10;   - Start each service (`userservice`, `auctionservice`, `schedularservice`, `gateway`) similarly.&#10;7. **Access the API Gateway**&#10;   - The gateway will be available at `http://localhost:&lt;gateway-port&gt;`.&#10;&#10;## Development&#10;- Each microservice has its own `pom.xml` and can be developed independently.&#10;- Configuration is managed centrally via the config server.&#10;- Logging is configured via Log4j2.&#10;- Use the provided `HELP.md` files in each service for service-specific details.&#10;&#10;## Contributing&#10;Contributions are welcome! Please open issues or submit pull requests for improvements, bug fixes, or new features.&#10;&#10;## Contact&#10;For questions or support, open an issue or contact the maintainer at [your-email@example.com].&#10;&#10;---&#10;&#10;**Note:** See `TODO list.txt` for planned features and improvements, including Keycloak integration, Kafka events, and more advanced auction features." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auctionservice/src/main/java/com/auction/auctionservice/controller/AuctionController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auctionservice/src/main/java/com/auction/auctionservice/controller/AuctionController.java" />
              <option name="originalContent" value="package com.auction.auctionservice.controller;&#10;&#10;import com.auction.auctionservice.dto.AuctionRequestVO;&#10;import com.auction.auctionservice.model.AuctionResponseVO;&#10;import com.auction.auctionservice.service.AuctionService;&#10;import com.auction.auctionservice.constants.AuctionConstants;&#10;&#10;import jakarta.validation.Valid;&#10;import org.apache.logging.log4j.LogManager;&#10;import org.apache.logging.log4j.Logger;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.beans.factory.annotation.Qualifier;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;import java.util.function.ToDoubleBiFunction;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/auctions&quot;)&#10;public class AuctionController {&#10;&#10;    @Autowired&#10;    @Qualifier(AuctionConstants.AUCTIONSERVICEIMPL)&#10;    private AuctionService auctionService;&#10;&#10;    private static final Logger logger = LogManager.getLogger(AuctionController.class);&#10;&#10;    @PostMapping&#10;    public ResponseEntity&lt;AuctionResponseVO&gt; createAuction(@Valid @RequestBody AuctionRequestVO request) {&#10;        try {&#10;            return ResponseEntity.ok(auctionService.createAuction(request));&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in createAuction: &quot; + e.getMessage(), e);&#10;            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);&#10;        }&#10;    }&#10;&#10;    @GetMapping(&quot;/{auctionId}&quot;)&#10;    public ResponseEntity&lt;AuctionResponseVO&gt; getAuctionById(@PathVariable String auctionId) {&#10;        try {&#10;            return ResponseEntity.ok(auctionService.getAuctionById(auctionId));&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in getAuctionById: &quot; + e.getMessage(), e);&#10;            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);&#10;        }&#10;    }&#10;&#10;    @GetMapping(&quot;/user/{userId}&quot;)&#10;    public ResponseEntity&lt;List&lt;AuctionResponseVO&gt;&gt; getAuctionsBySellerId(@PathVariable String userId) {&#10;        try {&#10;            return ResponseEntity.ok(auctionService.getAuctionsBySellerId(userId));&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in getAuctionsBySellerId: &quot; + e.getMessage(), e);&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);&#10;        }&#10;    }&#10;&#10;    @GetMapping&#10;    public ResponseEntity&lt;List&lt;AuctionResponseVO&gt;&gt; getAllAuctions() {&#10;        try {&#10;            return ResponseEntity.ok(auctionService.getAllAuctions());&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in getAllAuctions: &quot; + e.getMessage(), e);&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.auction.auctionservice.controller;&#13;&#10;&#13;&#10;import com.auction.auctionservice.dto.AuctionRequestVO;&#13;&#10;import com.auction.auctionservice.model.AuctionResponseVO;&#13;&#10;import com.auction.auctionservice.service.AuctionService;&#13;&#10;import com.auction.auctionservice.constants.AuctionConstants;&#13;&#10;&#13;&#10;import jakarta.validation.Valid;&#13;&#10;import org.apache.logging.log4j.LogManager;&#13;&#10;import org.apache.logging.log4j.Logger;&#13;&#10;import org.springframework.beans.factory.annotation.Autowired;&#13;&#10;import org.springframework.beans.factory.annotation.Qualifier;&#13;&#10;import org.springframework.http.HttpStatus;&#13;&#10;import org.springframework.http.ResponseEntity;&#13;&#10;import org.springframework.web.bind.annotation.*;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;import java.util.function.ToDoubleBiFunction;&#13;&#10;&#13;&#10;@RestController&#13;&#10;@RequestMapping(&quot;/api/auctions&quot;)&#13;&#10;public class AuctionController {&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    @Qualifier(AuctionConstants.AUCTIONSERVICEIMPL)&#13;&#10;    private AuctionService auctionService;&#13;&#10;&#13;&#10;    private static final Logger logger = LogManager.getLogger(AuctionController.class);&#13;&#10;&#13;&#10;    @PostMapping&#13;&#10;    public ResponseEntity&lt;AuctionResponseVO&gt; createAuction(@Valid @RequestBody AuctionRequestVO request) {&#13;&#10;        try {&#13;&#10;            return ResponseEntity.ok(auctionService.createAuction(request));&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in createAuction: &quot; + e.getMessage(), e);&#13;&#10;            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @GetMapping(&quot;/{auctionId}&quot;)&#13;&#10;    public ResponseEntity&lt;AuctionResponseVO&gt; getAuctionById(@PathVariable String auctionId) {&#13;&#10;        try {&#13;&#10;            return ResponseEntity.ok(auctionService.getAuctionById(auctionId));&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in getAuctionById: &quot; + e.getMessage(), e);&#13;&#10;            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @GetMapping(&quot;/user/{userId}&quot;)&#13;&#10;    public ResponseEntity&lt;List&lt;AuctionResponseVO&gt;&gt; getAuctionsBySellerId(@PathVariable String userId) {&#13;&#10;        try {&#13;&#10;            return ResponseEntity.ok(auctionService.getAuctionsBySellerId(userId));&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in getAuctionsBySellerId: &quot; + e.getMessage(), e);&#13;&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @GetMapping&#13;&#10;    public ResponseEntity&lt;List&lt;AuctionResponseVO&gt;&gt; getAllAuctions() {&#13;&#10;        try {&#13;&#10;            return ResponseEntity.ok(auctionService.getAllAuctions());&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in getAllAuctions: &quot; + e.getMessage(), e);&#13;&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // NEW: Update auction endpoint for frontend integration&#13;&#10;    @PutMapping(&quot;/{auctionId}&quot;)&#13;&#10;    public ResponseEntity&lt;AuctionResponseVO&gt; updateAuction(@PathVariable String auctionId, @Valid @RequestBody AuctionRequestVO request) {&#13;&#10;        try {&#13;&#10;            AuctionResponseVO updatedAuction = auctionService.updateAuction(auctionId, request);&#13;&#10;            return ResponseEntity.ok(updatedAuction);&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in updateAuction: &quot; + e.getMessage(), e);&#13;&#10;            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // NEW: Delete auction endpoint for frontend integration&#13;&#10;    @DeleteMapping(&quot;/{auctionId}&quot;)&#13;&#10;    public ResponseEntity&lt;String&gt; deleteAuction(@PathVariable String auctionId) {&#13;&#10;        try {&#13;&#10;            auctionService.deleteAuction(auctionId);&#13;&#10;            return ResponseEntity.ok(&quot;Auction deleted successfully&quot;);&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in deleteAuction: &quot; + e.getMessage(), e);&#13;&#10;            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(&quot;Failed to delete auction&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auctionservice/src/main/java/com/auction/auctionservice/controller/BidController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auctionservice/src/main/java/com/auction/auctionservice/controller/BidController.java" />
              <option name="originalContent" value="package com.auction.auctionservice.controller;&#10;&#10;import com.auction.auctionservice.model.BidRequestVO;&#10;import com.auction.auctionservice.model.BidVO;&#10;import com.auction.auctionservice.service.BidService;&#10;import com.auction.auctionservice.constants.AuctionConstants;&#10;&#10;import org.apache.logging.log4j.LogManager;&#10;import org.apache.logging.log4j.Logger;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.beans.factory.annotation.Qualifier;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/bids&quot;)&#10;public class BidController {&#10;&#10;    @Autowired&#10;    @Qualifier(AuctionConstants.BIDSERVICEIMPL)&#10;    private BidService bidService;&#10;&#10;    private static final Logger logger = LogManager.getLogger(BidController.class);&#10;&#10;    @PostMapping&#10;    public ResponseEntity&lt;String&gt; placeBid(@RequestBody BidRequestVO request) {&#10;        try {&#10;            bidService.placeBid(request);&#10;            return ResponseEntity.ok(&quot;Bid placed successfully.&quot;);&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in placeBid: &quot; + e.getMessage(), e);&#10;            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(&quot;Failed to place bid.&quot;);&#10;        }&#10;    }&#10;&#10;    @GetMapping(&quot;/auction/{auctionId}&quot;)&#10;    public ResponseEntity&lt;List&lt;BidVO&gt;&gt; getBidsForAuction(@PathVariable String auctionId) {&#10;        try {&#10;            return ResponseEntity.ok(bidService.getBidsForAuction(auctionId));&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in getBidsForAuction: &quot; + e.getMessage(), e);&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.auction.auctionservice.controller;&#13;&#10;&#13;&#10;import com.auction.auctionservice.model.BidRequestVO;&#13;&#10;import com.auction.auctionservice.model.BidVO;&#13;&#10;import com.auction.auctionservice.service.BidService;&#13;&#10;import com.auction.auctionservice.constants.AuctionConstants;&#13;&#10;&#13;&#10;import org.apache.logging.log4j.LogManager;&#13;&#10;import org.apache.logging.log4j.Logger;&#13;&#10;import org.springframework.beans.factory.annotation.Autowired;&#13;&#10;import org.springframework.beans.factory.annotation.Qualifier;&#13;&#10;import org.springframework.http.HttpStatus;&#13;&#10;import org.springframework.http.ResponseEntity;&#13;&#10;import org.springframework.web.bind.annotation.*;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;@RestController&#13;&#10;@RequestMapping(&quot;/api/bids&quot;)&#13;&#10;public class BidController {&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    @Qualifier(AuctionConstants.BIDSERVICEIMPL)&#13;&#10;    private BidService bidService;&#13;&#10;&#13;&#10;    private static final Logger logger = LogManager.getLogger(BidController.class);&#13;&#10;&#13;&#10;    @PostMapping&#13;&#10;    public ResponseEntity&lt;String&gt; placeBid(@RequestBody BidRequestVO request) {&#13;&#10;        try {&#13;&#10;            bidService.placeBid(request);&#13;&#10;            return ResponseEntity.ok(&quot;Bid placed successfully.&quot;);&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in placeBid: &quot; + e.getMessage(), e);&#13;&#10;            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(&quot;Failed to place bid.&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @GetMapping(&quot;/auction/{auctionId}&quot;)&#13;&#10;    public ResponseEntity&lt;List&lt;BidVO&gt;&gt; getBidsForAuction(@PathVariable String auctionId) {&#13;&#10;        try {&#13;&#10;            return ResponseEntity.ok(bidService.getBidsForAuction(auctionId));&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in getBidsForAuction: &quot; + e.getMessage(), e);&#13;&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // NEW: Get user bids endpoint for frontend integration&#13;&#10;    @GetMapping(&quot;/user/{userId}&quot;)&#13;&#10;    public ResponseEntity&lt;List&lt;BidVO&gt;&gt; getBidsForUser(@PathVariable String userId) {&#13;&#10;        try {&#13;&#10;            return ResponseEntity.ok(bidService.getBidsForUser(userId));&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in getBidsForUser: &quot; + e.getMessage(), e);&#13;&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auctionservice/src/main/java/com/auction/auctionservice/dao/AuctionDAO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auctionservice/src/main/java/com/auction/auctionservice/dao/AuctionDAO.java" />
              <option name="originalContent" value="package com.auction.auctionservice.dao;&#10;&#10;import com.auction.auctionservice.model.AuctionVO;&#10;&#10;&#10;import java.util.List;&#10;&#10;public interface AuctionDAO {&#10;    void createAuction(AuctionVO auction);&#10;&#10;    AuctionVO getAuctionById(String auctionId);&#10;&#10;    List&lt;AuctionVO&gt; getAuctionsBySellerId(String userId);&#10;&#10;    List&lt;AuctionVO&gt; getAllAuctions();&#10;&#10;    void markAuctionsAsInactive(List&lt;String&gt; auctionIds);&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.auction.auctionservice.dao;&#13;&#10;&#13;&#10;import com.auction.auctionservice.model.AuctionVO;&#13;&#10;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public interface AuctionDAO {&#13;&#10;    void createAuction(AuctionVO auction);&#13;&#10;&#13;&#10;    AuctionVO getAuctionById(String auctionId);&#13;&#10;&#13;&#10;    List&lt;AuctionVO&gt; getAuctionsBySellerId(String userId);&#13;&#10;&#13;&#10;    List&lt;AuctionVO&gt; getAllAuctions();&#13;&#10;&#13;&#10;    void markAuctionsAsInactive(List&lt;String&gt; auctionIds);&#13;&#10;&#13;&#10;    void updateAuction(AuctionVO auction);&#13;&#10;    &#13;&#10;    void deleteAuction(String auctionId);&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auctionservice/src/main/java/com/auction/auctionservice/dao/BidDAO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auctionservice/src/main/java/com/auction/auctionservice/dao/BidDAO.java" />
              <option name="originalContent" value="package com.auction.auctionservice.dao;&#10;&#10;import com.auction.auctionservice.model.BidVO;&#10;&#10;import java.util.List;&#10;&#10;public interface BidDAO {&#10;    void placeBid(BidVO bid);&#10;&#10;    List&lt;BidVO&gt; getBidsForAuction(String auctionId);&#10;}&#10;" />
              <option name="updatedContent" value="package com.auction.auctionservice.dao;&#13;&#10;&#13;&#10;import com.auction.auctionservice.model.BidVO;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public interface BidDAO {&#13;&#10;    void placeBid(BidVO bid);&#13;&#10;&#13;&#10;    List&lt;BidVO&gt; getBidsForAuction(String auctionId);&#13;&#10;    &#13;&#10;    List&lt;BidVO&gt; getBidsForUser(String userId);&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auctionservice/src/main/java/com/auction/auctionservice/dao/impl/AuctionDAOImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auctionservice/src/main/java/com/auction/auctionservice/dao/impl/AuctionDAOImpl.java" />
              <option name="originalContent" value="package com.auction.auctionservice.dao.impl;&#10;&#10;import com.auction.auctionservice.constants.AuctionConstants;&#10;import com.auction.auctionservice.dao.AuctionDAO;&#10;import com.auction.auctionservice.model.AuctionVO;&#10;import com.auction.auctionservice.rowmapper.AuctionVORowMapper;&#10;import org.apache.logging.log4j.LogManager;&#10;import org.apache.logging.log4j.Logger;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.context.annotation.PropertySource;&#10;import org.springframework.dao.EmptyResultDataAccessException;&#10;import org.springframework.jdbc.core.JdbcTemplate;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;@Repository(AuctionConstants.AUCTIONDAOIMPL)&#10;@PropertySource(&quot;classpath:postgres.properties&quot;)&#10;public class AuctionDAOImpl implements AuctionDAO {&#10;&#10;    @Autowired&#10;    private JdbcTemplate jdbcTemplate;&#10;&#10;    @Value(&quot;${CREATE_AUCTION}&quot;)&#10;    private String createAuctionSQL;&#10;&#10;    @Value(&quot;${FIND_AUCTION_BY_ID}&quot;)&#10;    private String findAuctionByIdSQL;&#10;&#10;    @Value(&quot;${FIND_AUCTIONS_BY_SELLER_ID}&quot;)&#10;    private String findAuctionsBySellerIdSQL;&#10;&#10;    @Value(&quot;${FIND_ALL_AUCTIONS}&quot;)&#10;    private String findAllAuctionsSQL;&#10;&#10;    @Value(&quot;${UPDATE_EXPIRED_AUCTIONS}&quot;)&#10;    private String updateExpiredAuctions;&#10;&#10;    // NEW: SQL queries for update and delete operations&#10;    @Value(&quot;${UPDATE_AUCTION}&quot;)&#10;    private String updateAuctionSQL;&#10;&#10;    @Value(&quot;${DELETE_AUCTION}&quot;)&#10;    private String deleteAuctionSQL;&#10;&#10;    private static final Logger logger = LogManager.getLogger(AuctionDAOImpl.class);&#10;&#10;    @Override&#10;    public void createAuction(AuctionVO auction) {&#10;        try {&#10;            jdbcTemplate.update(&#10;                    createAuctionSQL,&#10;                    auction.getAuctionId(),&#10;                    auction.getItemName(),&#10;                    auction.getDescription(),&#10;                    auction.getStartingPrice(),&#10;                    auction.getCurrentPrice(),&#10;                    auction.getSellerId(),&#10;                    auction.getStartTime(),&#10;                    auction.getEndTime(),&#10;                    auction.isActive()&#10;            );&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in createAuction: &quot; + e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public AuctionVO getAuctionById(String auctionId) {&#10;        try {&#10;            return jdbcTemplate.queryForObject(&#10;                    findAuctionByIdSQL,&#10;                    new Object[]{auctionId},&#10;                    new AuctionVORowMapper()&#10;            );&#10;        } catch (EmptyResultDataAccessException e) {&#10;            logger.fatal(&quot;Auction not found for ID: &quot; + auctionId + &quot; — &quot; + e);&#10;            throw e;&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in getAuctionById: &quot; + e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;AuctionVO&gt; getAuctionsBySellerId(String userId) {&#10;        try {&#10;            return jdbcTemplate.query(&#10;                    findAuctionsBySellerIdSQL,&#10;                    new Object[]{userId},&#10;                    new AuctionVORowMapper()&#10;            );&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in getAuctionsBySellerId: &quot; + e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;AuctionVO&gt; getAllAuctions() {&#10;        try {&#10;            return jdbcTemplate.query(&#10;                    findAllAuctionsSQL,&#10;                    new AuctionVORowMapper()&#10;            );&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in getAllAuctions: &quot; + e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void markAuctionsAsInactive(List&lt;String&gt; auctionIds) {&#10;        if (auctionIds == null || auctionIds.isEmpty()) return;&#10;&#10;        try {&#10;            String sql = updateExpiredAuctions&#10;                    .formatted(auctionIds.stream().map(id -&gt; &quot;?&quot;).collect(Collectors.joining(&quot;,&quot;)));&#10;&#10;            jdbcTemplate.update(sql, auctionIds.toArray());&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error while marking auctions as inactive: &quot; + e.getMessage(), e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.auction.auctionservice.dao.impl;&#10;&#10;import com.auction.auctionservice.constants.AuctionConstants;&#10;import com.auction.auctionservice.dao.AuctionDAO;&#10;import com.auction.auctionservice.model.AuctionVO;&#10;import com.auction.auctionservice.rowmapper.AuctionVORowMapper;&#10;import org.apache.logging.log4j.LogManager;&#10;import org.apache.logging.log4j.Logger;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.context.annotation.PropertySource;&#10;import org.springframework.dao.EmptyResultDataAccessException;&#10;import org.springframework.jdbc.core.JdbcTemplate;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;@Repository(AuctionConstants.AUCTIONDAOIMPL)&#10;@PropertySource(&quot;classpath:postgres.properties&quot;)&#10;public class AuctionDAOImpl implements AuctionDAO {&#10;&#10;    @Autowired&#10;    private JdbcTemplate jdbcTemplate;&#10;&#10;    @Value(&quot;${CREATE_AUCTION}&quot;)&#10;    private String createAuctionSQL;&#10;&#10;    @Value(&quot;${FIND_AUCTION_BY_ID}&quot;)&#10;    private String findAuctionByIdSQL;&#10;&#10;    @Value(&quot;${FIND_AUCTIONS_BY_SELLER_ID}&quot;)&#10;    private String findAuctionsBySellerIdSQL;&#10;&#10;    @Value(&quot;${FIND_ALL_AUCTIONS}&quot;)&#10;    private String findAllAuctionsSQL;&#10;&#10;    @Value(&quot;${UPDATE_EXPIRED_AUCTIONS}&quot;)&#10;    private String updateExpiredAuctions;&#10;&#10;    // NEW: SQL queries for update and delete operations&#10;    @Value(&quot;${UPDATE_AUCTION}&quot;)&#10;    private String updateAuctionSQL;&#10;&#10;    @Value(&quot;${DELETE_AUCTION}&quot;)&#10;    private String deleteAuctionSQL;&#10;&#10;    private static final Logger logger = LogManager.getLogger(AuctionDAOImpl.class);&#10;&#10;    @Override&#10;    public void createAuction(AuctionVO auction) {&#10;        try {&#10;            jdbcTemplate.update(&#10;                    createAuctionSQL,&#10;                    auction.getAuctionId(),&#10;                    auction.getItemName(),&#10;                    auction.getDescription(),&#10;                    auction.getStartingPrice(),&#10;                    auction.getCurrentPrice(),&#10;                    auction.getSellerId(),&#10;                    auction.getStartTime(),&#10;                    auction.getEndTime(),&#10;                    auction.isActive()&#10;            );&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in createAuction: &quot; + e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public AuctionVO getAuctionById(String auctionId) {&#10;        try {&#10;            return jdbcTemplate.queryForObject(&#10;                    findAuctionByIdSQL,&#10;                    new Object[]{auctionId},&#10;                    new AuctionVORowMapper()&#10;            );&#10;        } catch (EmptyResultDataAccessException e) {&#10;            logger.fatal(&quot;Auction not found for ID: &quot; + auctionId + &quot; — &quot; + e);&#10;            throw e;&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in getAuctionById: &quot; + e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;AuctionVO&gt; getAuctionsBySellerId(String userId) {&#10;        try {&#10;            return jdbcTemplate.query(&#10;                    findAuctionsBySellerIdSQL,&#10;                    new Object[]{userId},&#10;                    new AuctionVORowMapper()&#10;            );&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in getAuctionsBySellerId: &quot; + e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;AuctionVO&gt; getAllAuctions() {&#10;        try {&#10;            return jdbcTemplate.query(&#10;                    findAllAuctionsSQL,&#10;                    new AuctionVORowMapper()&#10;            );&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in getAllAuctions: &quot; + e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void markAuctionsAsInactive(List&lt;String&gt; auctionIds) {&#10;        if (auctionIds == null || auctionIds.isEmpty()) return;&#10;&#10;        try {&#10;            String sql = updateExpiredAuctions&#10;                    .formatted(auctionIds.stream().map(id -&gt; &quot;?&quot;).collect(Collectors.joining(&quot;,&quot;)));&#10;&#10;            jdbcTemplate.update(sql, auctionIds.toArray());&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error while marking auctions as inactive: &quot; + e.getMessage(), e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    // NEW: Update auction implementation&#10;    @Override&#10;    public void updateAuction(AuctionVO auction) {&#10;        try {&#10;            int rowsAffected = jdbcTemplate.update(&#10;                    updateAuctionSQL,&#10;                    auction.getItemName(),&#10;                    auction.getDescription(),&#10;                    auction.getStartingPrice(),&#10;                    auction.getCurrentPrice(),&#10;                    auction.getEndTime(),&#10;                    auction.getAuctionId()&#10;            );&#10;            &#10;            if (rowsAffected == 0) {&#10;                throw new RuntimeException(&quot;No auction found with ID: &quot; + auction.getAuctionId());&#10;            }&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in updateAuction: &quot; + e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    // NEW: Delete auction implementation&#10;    @Override&#10;    public void deleteAuction(String auctionId) {&#10;        try {&#10;            int rowsAffected = jdbcTemplate.update(deleteAuctionSQL, auctionId);&#10;            &#10;            if (rowsAffected == 0) {&#10;                throw new RuntimeException(&quot;No auction found with ID: &quot; + auctionId);&#10;            }&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in deleteAuction: &quot; + e);&#10;            throw e;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auctionservice/src/main/java/com/auction/auctionservice/dao/impl/BidDAOImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auctionservice/src/main/java/com/auction/auctionservice/dao/impl/BidDAOImpl.java" />
              <option name="originalContent" value="package com.auction.auctionservice.dao.impl;&#10;&#10;import com.auction.auctionservice.constants.AuctionConstants;&#10;import com.auction.auctionservice.dao.BidDAO;&#10;import com.auction.auctionservice.model.BidVO;&#10;import com.auction.auctionservice.rowmapper.BidVORowMapper;&#10;import org.apache.logging.log4j.LogManager;&#10;import org.apache.logging.log4j.Logger;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.context.annotation.PropertySource;&#10;import org.springframework.jdbc.core.JdbcTemplate;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;&#10;@Repository(AuctionConstants.BIDDAOIMPL)&#10;@PropertySource(&quot;classpath:postgres.properties&quot;)&#10;public class BidDAOImpl implements BidDAO {&#10;&#10;    @Autowired&#10;    private JdbcTemplate jdbcTemplate;&#10;&#10;    @Value(&quot;${PLACE_BID}&quot;)&#10;    private String placeBidSQL;&#10;&#10;    @Value(&quot;${GET_BIDS_FOR_AUCTION}&quot;)&#10;    private String getBidsForAuctionSQL;&#10;&#10;    private static final Logger logger = LogManager.getLogger(BidDAOImpl.class);&#10;&#10;    @Override&#10;    public void placeBid(BidVO bid) {&#10;        try {&#10;            jdbcTemplate.update(&#10;                    placeBidSQL,&#10;                    bid.getBidId(),&#10;                    bid.getAmount(),&#10;                    bid.getAuctionId(),&#10;                    bid.getBidderId(),&#10;                    bid.getBidTime()&#10;            );&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in placeBid: &quot; + e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;BidVO&gt; getBidsForAuction(String auctionId) {&#10;        try {&#10;            return jdbcTemplate.query(&#10;                    getBidsForAuctionSQL,&#10;                    new Object[]{auctionId},&#10;                    new BidVORowMapper()&#10;            );&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in getBidsForAuction: &quot; + e);&#10;            throw e;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.auction.auctionservice.dao.impl;&#10;&#10;import com.auction.auctionservice.constants.AuctionConstants;&#10;import com.auction.auctionservice.dao.BidDAO;&#10;import com.auction.auctionservice.model.BidVO;&#10;import com.auction.auctionservice.rowmapper.BidVORowMapper;&#10;import org.apache.logging.log4j.LogManager;&#10;import org.apache.logging.log4j.Logger;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.context.annotation.PropertySource;&#10;import org.springframework.jdbc.core.JdbcTemplate;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;&#10;@Repository(AuctionConstants.BIDDAOIMPL)&#10;@PropertySource(&quot;classpath:postgres.properties&quot;)&#10;public class BidDAOImpl implements BidDAO {&#10;&#10;    @Autowired&#10;    private JdbcTemplate jdbcTemplate;&#10;&#10;    @Value(&quot;${PLACE_BID}&quot;)&#10;    private String placeBidSQL;&#10;&#10;    @Value(&quot;${GET_BIDS_FOR_AUCTION}&quot;)&#10;    private String getBidsForAuctionSQL;&#10;&#10;    // NEW: SQL query for getting user bids&#10;    @Value(&quot;${GET_BIDS_FOR_USER}&quot;)&#10;    private String getBidsForUserSQL;&#10;&#10;    private static final Logger logger = LogManager.getLogger(BidDAOImpl.class);&#10;&#10;    @Override&#10;    public void placeBid(BidVO bid) {&#10;        try {&#10;            jdbcTemplate.update(&#10;                    placeBidSQL,&#10;                    bid.getBidId(),&#10;                    bid.getAmount(),&#10;                    bid.getAuctionId(),&#10;                    bid.getBidderId(),&#10;                    bid.getBidTime()&#10;            );&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in placeBid: &quot; + e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;BidVO&gt; getBidsForAuction(String auctionId) {&#10;        try {&#10;            return jdbcTemplate.query(&#10;                    getBidsForAuctionSQL,&#10;                    new Object[]{auctionId},&#10;                    new BidVORowMapper()&#10;            );&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in getBidsForAuction: &quot; + e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    // NEW: Get bids for user implementation&#10;    @Override&#10;    public List&lt;BidVO&gt; getBidsForUser(String userId) {&#10;        try {&#10;            return jdbcTemplate.query(&#10;                    getBidsForUserSQL,&#10;                    new Object[]{userId},&#10;                    new BidVORowMapper()&#10;            );&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in getBidsForUser: &quot; + e);&#10;            throw e;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auctionservice/src/main/java/com/auction/auctionservice/service/AuctionService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auctionservice/src/main/java/com/auction/auctionservice/service/AuctionService.java" />
              <option name="originalContent" value="package com.auction.auctionservice.service;&#10;&#10;import com.auction.auctionservice.dto.AuctionRequestVO;&#10;import com.auction.auctionservice.model.AuctionResponseVO;&#10;&#10;import jakarta.validation.Valid;&#10;&#10;import java.util.List;&#10;&#10;public interface AuctionService {&#10;    AuctionResponseVO createAuction(@Valid AuctionRequestVO request);&#10;&#10;    AuctionResponseVO getAuctionById(String auctionId);&#10;&#10;    List&lt;AuctionResponseVO&gt; getAuctionsBySellerId(String userId);&#10;&#10;    List&lt;AuctionResponseVO&gt; getAllAuctions();&#10;&#10;    void markAuctionsAsExpired(List&lt;String&gt; auctionIds);&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.auction.auctionservice.service;&#13;&#10;&#13;&#10;import com.auction.auctionservice.dto.AuctionRequestVO;&#13;&#10;import com.auction.auctionservice.model.AuctionResponseVO;&#13;&#10;&#13;&#10;import jakarta.validation.Valid;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public interface AuctionService {&#13;&#10;    AuctionResponseVO createAuction(@Valid AuctionRequestVO request);&#13;&#10;&#13;&#10;    AuctionResponseVO getAuctionById(String auctionId);&#13;&#10;&#13;&#10;    List&lt;AuctionResponseVO&gt; getAuctionsBySellerId(String userId);&#13;&#10;&#13;&#10;    List&lt;AuctionResponseVO&gt; getAllAuctions();&#13;&#10;&#13;&#10;    void markAuctionsAsExpired(List&lt;String&gt; auctionIds);&#13;&#10;&#13;&#10;    // NEW: Update and delete auction methods for frontend integration&#13;&#10;    AuctionResponseVO updateAuction(String auctionId, AuctionRequestVO request);&#13;&#10;    &#13;&#10;    void deleteAuction(String auctionId);&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auctionservice/src/main/java/com/auction/auctionservice/service/BidService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auctionservice/src/main/java/com/auction/auctionservice/service/BidService.java" />
              <option name="originalContent" value="package com.auction.auctionservice.service;&#10;&#10;import com.auction.auctionservice.model.BidRequestVO;&#10;import com.auction.auctionservice.model.BidVO;&#10;&#10;import java.util.List;&#10;&#10;public interface BidService {&#10;    void placeBid(BidRequestVO request);&#10;&#10;    List&lt;BidVO&gt; getBidsForAuction(String auctionId);&#10;}&#10;" />
              <option name="updatedContent" value="package com.auction.auctionservice.service;&#13;&#10;&#13;&#10;import com.auction.auctionservice.model.BidRequestVO;&#13;&#10;import com.auction.auctionservice.model.BidVO;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public interface BidService {&#13;&#10;    void placeBid(BidRequestVO request);&#13;&#10;&#13;&#10;    List&lt;BidVO&gt; getBidsForAuction(String auctionId);&#13;&#10;    &#13;&#10;    List&lt;BidVO&gt; getBidsForUser(String userId);&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auctionservice/src/main/java/com/auction/auctionservice/service/impl/AuctionServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auctionservice/src/main/java/com/auction/auctionservice/service/impl/AuctionServiceImpl.java" />
              <option name="originalContent" value="package com.auction.auctionservice.service.impl;&#10;&#10;import com.auction.auctionservice.constants.AuctionConstants;&#10;import com.auction.auctionservice.dao.AuctionDAO;&#10;&#10;import com.auction.auctionservice.dto.AuctionRequestVO;&#10;import com.auction.auctionservice.model.AuctionResponseVO;&#10;import com.auction.auctionservice.model.AuctionVO;&#10;import com.auction.auctionservice.service.AuctionService;&#10;import org.apache.logging.log4j.LogManager;&#10;import org.apache.logging.log4j.Logger;&#10;import org.springframework.amqp.rabbit.core.RabbitTemplate;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.beans.factory.annotation.Qualifier;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.time.LocalDateTime;&#10;import java.time.ZoneId;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.UUID;&#10;import java.util.stream.Collectors;&#10;&#10;@Service(AuctionConstants.AUCTIONSERVICEIMPL)&#10;public class AuctionServiceImpl implements AuctionService {&#10;&#10;    @Autowired&#10;    @Qualifier(AuctionConstants.AUCTIONDAOIMPL)&#10;    private AuctionDAO auctionDao;&#10;&#10;    @Autowired&#10;    private RabbitTemplate rabbitTemplate;&#10;&#10;    @Value(&quot;${rabbitmq.exchange.name}&quot;)&#10;    private String exchange;&#10;&#10;    @Value(&quot;${rabbitmq.routing.created}&quot;)&#10;    private String createdRoutingKey;&#10;&#10;    private static final Logger logger = LogManager.getLogger(AuctionServiceImpl.class);&#10;&#10;    @Override&#10;    public AuctionResponseVO createAuction(AuctionRequestVO request) {&#10;        try {&#10;            AuctionVO auction = new AuctionVO();&#10;            auction.setAuctionId(UUID.randomUUID().toString());&#10;            auction.setItemName(request.getItemName());&#10;            auction.setDescription(request.getDescription());&#10;            auction.setStartingPrice(request.getStartingPrice());&#10;            auction.setCurrentPrice(request.getStartingPrice());&#10;            auction.setSellerId(request.getSellerId());&#10;            auction.setStartTime(LocalDateTime.now());&#10;            auction.setEndTime(LocalDateTime.parse(request.getEndTime()));&#10;            auction.setActive(true);&#10;&#10;            auctionDao.createAuction(auction);&#10;&#10;            Map&lt;String, Object&gt; message = new HashMap&lt;&gt;();&#10;            message.put(&quot;auctionId&quot;, auction.getAuctionId());&#10;            message.put(&quot;endTime&quot;, auction.getEndTime().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli());&#10;&#10;            rabbitTemplate.convertAndSend(exchange, createdRoutingKey, message);&#10;&#10;            return mapToResponseVO(auction);&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in createAuction: &quot; + e.getMessage(), e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public AuctionResponseVO getAuctionById(String auctionId) {&#10;        try {&#10;            AuctionVO auction = auctionDao.getAuctionById(auctionId);&#10;            return mapToResponseVO(auction);&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in getAuctionById: &quot; + e.getMessage(), e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;AuctionResponseVO&gt; getAuctionsBySellerId(String userId) {&#10;        try {&#10;            return auctionDao.getAuctionsBySellerId(userId).stream()&#10;                    .map(this::mapToResponseVO)&#10;                    .collect(Collectors.toList());&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in getAuctionsBySellerId: &quot; + e.getMessage(), e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;AuctionResponseVO&gt; getAllAuctions() {&#10;        try {&#10;            return auctionDao.getAllAuctions().stream()&#10;                    .map(this::mapToResponseVO)&#10;                    .collect(Collectors.toList());&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in getAllAuctions: &quot; + e.getMessage(), e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void markAuctionsAsExpired(List&lt;String&gt; auctionIds) {&#10;        try {&#10;            auctionDao.markAuctionsAsInactive(auctionIds);&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Failed to mark auctions as inactive: &quot; + e.getMessage(), e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;&#10;    private AuctionResponseVO mapToResponseVO(AuctionVO auction) {&#10;        AuctionResponseVO vo = new AuctionResponseVO();&#10;        vo.setAuctionId(auction.getAuctionId());&#10;        vo.setItemName(auction.getItemName());&#10;        vo.setDescription(auction.getDescription());&#10;        vo.setStartingPrice(auction.getStartingPrice());&#10;        vo.setCurrentPrice(auction.getCurrentPrice());&#10;        vo.setSellerId(auction.getSellerId());&#10;        vo.setStartTime(auction.getStartTime().toString());&#10;        vo.setEndTime(auction.getEndTime().toString());&#10;        vo.setActive(auction.isActive());&#10;        return vo;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.auction.auctionservice.service.impl;&#13;&#10;&#13;&#10;import com.auction.auctionservice.constants.AuctionConstants;&#13;&#10;import com.auction.auctionservice.dao.AuctionDAO;&#13;&#10;&#13;&#10;import com.auction.auctionservice.dto.AuctionRequestVO;&#13;&#10;import com.auction.auctionservice.model.AuctionResponseVO;&#13;&#10;import com.auction.auctionservice.model.AuctionVO;&#13;&#10;import com.auction.auctionservice.service.AuctionService;&#13;&#10;import org.apache.logging.log4j.LogManager;&#13;&#10;import org.apache.logging.log4j.Logger;&#13;&#10;import org.springframework.amqp.rabbit.core.RabbitTemplate;&#13;&#10;import org.springframework.beans.factory.annotation.Autowired;&#13;&#10;import org.springframework.beans.factory.annotation.Qualifier;&#13;&#10;import org.springframework.beans.factory.annotation.Value;&#13;&#10;import org.springframework.stereotype.Service;&#13;&#10;&#13;&#10;import java.time.LocalDateTime;&#13;&#10;import java.time.ZoneId;&#13;&#10;import java.util.HashMap;&#13;&#10;import java.util.List;&#13;&#10;import java.util.Map;&#13;&#10;import java.util.UUID;&#13;&#10;import java.util.stream.Collectors;&#13;&#10;&#13;&#10;@Service(AuctionConstants.AUCTIONSERVICEIMPL)&#13;&#10;public class AuctionServiceImpl implements AuctionService {&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    @Qualifier(AuctionConstants.AUCTIONDAOIMPL)&#13;&#10;    private AuctionDAO auctionDao;&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private RabbitTemplate rabbitTemplate;&#13;&#10;&#13;&#10;    @Value(&quot;${rabbitmq.exchange.name}&quot;)&#13;&#10;    private String exchange;&#13;&#10;&#13;&#10;    @Value(&quot;${rabbitmq.routing.created}&quot;)&#13;&#10;    private String createdRoutingKey;&#13;&#10;&#13;&#10;    private static final Logger logger = LogManager.getLogger(AuctionServiceImpl.class);&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public AuctionResponseVO createAuction(AuctionRequestVO request) {&#13;&#10;        try {&#13;&#10;            AuctionVO auction = new AuctionVO();&#13;&#10;            auction.setAuctionId(UUID.randomUUID().toString());&#13;&#10;            auction.setItemName(request.getItemName());&#13;&#10;            auction.setDescription(request.getDescription());&#13;&#10;            auction.setStartingPrice(request.getStartingPrice());&#13;&#10;            auction.setCurrentPrice(request.getStartingPrice());&#13;&#10;            auction.setSellerId(request.getSellerId());&#13;&#10;            auction.setStartTime(LocalDateTime.now());&#13;&#10;            auction.setEndTime(LocalDateTime.parse(request.getEndTime()));&#13;&#10;            auction.setActive(true);&#13;&#10;&#13;&#10;            auctionDao.createAuction(auction);&#13;&#10;&#13;&#10;            Map&lt;String, Object&gt; message = new HashMap&lt;&gt;();&#13;&#10;            message.put(&quot;auctionId&quot;, auction.getAuctionId());&#13;&#10;            message.put(&quot;endTime&quot;, auction.getEndTime().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli());&#13;&#10;&#13;&#10;            rabbitTemplate.convertAndSend(exchange, createdRoutingKey, message);&#13;&#10;&#13;&#10;            return mapToResponseVO(auction);&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in createAuction: &quot; + e.getMessage(), e);&#13;&#10;            throw e;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public AuctionResponseVO getAuctionById(String auctionId) {&#13;&#10;        try {&#13;&#10;            AuctionVO auction = auctionDao.getAuctionById(auctionId);&#13;&#10;            return mapToResponseVO(auction);&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in getAuctionById: &quot; + e.getMessage(), e);&#13;&#10;            throw e;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public List&lt;AuctionResponseVO&gt; getAuctionsBySellerId(String userId) {&#13;&#10;        try {&#13;&#10;            return auctionDao.getAuctionsBySellerId(userId).stream()&#13;&#10;                    .map(this::mapToResponseVO)&#13;&#10;                    .collect(Collectors.toList());&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in getAuctionsBySellerId: &quot; + e.getMessage(), e);&#13;&#10;            throw e;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public List&lt;AuctionResponseVO&gt; getAllAuctions() {&#13;&#10;        try {&#13;&#10;            return auctionDao.getAllAuctions().stream()&#13;&#10;                    .map(this::mapToResponseVO)&#13;&#10;                    .collect(Collectors.toList());&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in getAllAuctions: &quot; + e.getMessage(), e);&#13;&#10;            throw e;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void markAuctionsAsExpired(List&lt;String&gt; auctionIds) {&#13;&#10;        try {&#13;&#10;            auctionDao.markAuctionsAsInactive(auctionIds);&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Failed to mark auctions as inactive: &quot; + e.getMessage(), e);&#13;&#10;            throw e;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public AuctionResponseVO updateAuction(String auctionId, AuctionRequestVO request) {&#13;&#10;        try {&#13;&#10;            // First check if auction exists and is still active&#13;&#10;            AuctionVO existingAuction = auctionDao.getAuctionById(auctionId);&#13;&#10;&#13;&#10;            if (!existingAuction.isActive()) {&#13;&#10;                throw new RuntimeException(&quot;Cannot update inactive auction&quot;);&#13;&#10;            }&#13;&#10;&#13;&#10;            // Update auction details&#13;&#10;            existingAuction.setItemName(request.getItemName());&#13;&#10;            existingAuction.setDescription(request.getDescription());&#13;&#10;            existingAuction.setEndTime(LocalDateTime.parse(request.getEndTime()));&#13;&#10;&#13;&#10;            // Only allow updating starting price if no bids have been placed&#13;&#10;            if (existingAuction.getCurrentPrice().equals(existingAuction.getStartingPrice())) {&#13;&#10;                existingAuction.setStartingPrice(request.getStartingPrice());&#13;&#10;                existingAuction.setCurrentPrice(request.getStartingPrice());&#13;&#10;            }&#13;&#10;&#13;&#10;            auctionDao.updateAuction(existingAuction);&#13;&#10;            return mapToResponseVO(existingAuction);&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in updateAuction: &quot; + e.getMessage(), e);&#13;&#10;            throw e;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void deleteAuction(String auctionId) {&#13;&#10;        try {&#13;&#10;            // First check if auction exists and can be deleted&#13;&#10;            AuctionVO existingAuction = auctionDao.getAuctionById(auctionId);&#13;&#10;&#13;&#10;            // Only allow deletion if auction hasn't started or has no bids&#13;&#10;            if (existingAuction.getCurrentPrice().compareTo(existingAuction.getStartingPrice()) &gt; 0) {&#13;&#10;                throw new RuntimeException(&quot;Cannot delete auction with existing bids&quot;);&#13;&#10;            }&#13;&#10;&#13;&#10;            auctionDao.deleteAuction(auctionId);&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in deleteAuction: &quot; + e.getMessage(), e);&#13;&#10;            throw e;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private AuctionResponseVO mapToResponseVO(AuctionVO auction) {&#13;&#10;        AuctionResponseVO vo = new AuctionResponseVO();&#13;&#10;        vo.setAuctionId(auction.getAuctionId());&#13;&#10;        vo.setItemName(auction.getItemName());&#13;&#10;        vo.setDescription(auction.getDescription());&#13;&#10;        vo.setStartingPrice(auction.getStartingPrice());&#13;&#10;        vo.setCurrentPrice(auction.getCurrentPrice());&#13;&#10;        vo.setSellerId(auction.getSellerId());&#13;&#10;        vo.setStartTime(auction.getStartTime().toString());&#13;&#10;        vo.setEndTime(auction.getEndTime().toString());&#13;&#10;        vo.setActive(auction.isActive());&#13;&#10;        return vo;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auctionservice/src/main/java/com/auction/auctionservice/service/impl/BidServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auctionservice/src/main/java/com/auction/auctionservice/service/impl/BidServiceImpl.java" />
              <option name="originalContent" value="package com.auction.auctionservice.service.impl;&#10;&#10;import com.auction.auctionservice.constants.AuctionConstants;&#10;import com.auction.auctionservice.dao.BidDAO;&#10;import com.auction.auctionservice.model.BidRequestVO;&#10;import com.auction.auctionservice.model.BidVO;&#10;import com.auction.auctionservice.service.BidService;&#10;import org.apache.logging.log4j.LogManager;&#10;import org.apache.logging.log4j.Logger;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.beans.factory.annotation.Qualifier;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;@Service(AuctionConstants.BIDSERVICEIMPL)&#10;public class BidServiceImpl implements BidService {&#10;&#10;    @Autowired&#10;    @Qualifier(AuctionConstants.BIDDAOIMPL)&#10;    private BidDAO bidDao;&#10;&#10;    private static final Logger logger = LogManager.getLogger(BidServiceImpl.class);&#10;&#10;    @Override&#10;    public void placeBid(BidRequestVO request) {&#10;        try {&#10;            BidVO bid = new BidVO();&#10;            bid.setBidId(UUID.randomUUID().toString());&#10;            bid.setAmount(request.getAmount());&#10;            bid.setAuctionId(request.getAuctionId());&#10;            bid.setBidderId(request.getBidderId());&#10;            bid.setBidTime(LocalDateTime.now());&#10;&#10;            bidDao.placeBid(bid);&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in placeBid: &quot; + e.getMessage(), e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;BidVO&gt; getBidsForAuction(String auctionId) {&#10;        try {&#10;            return bidDao.getBidsForAuction(auctionId);&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in getBidsForAuction: &quot; + e.getMessage(), e);&#10;            throw e;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.auction.auctionservice.service.impl;&#13;&#10;&#13;&#10;import com.auction.auctionservice.constants.AuctionConstants;&#13;&#10;import com.auction.auctionservice.dao.BidDAO;&#13;&#10;import com.auction.auctionservice.model.BidRequestVO;&#13;&#10;import com.auction.auctionservice.model.BidVO;&#13;&#10;import com.auction.auctionservice.service.BidService;&#13;&#10;import org.apache.logging.log4j.LogManager;&#13;&#10;import org.apache.logging.log4j.Logger;&#13;&#10;import org.springframework.beans.factory.annotation.Autowired;&#13;&#10;import org.springframework.beans.factory.annotation.Qualifier;&#13;&#10;import org.springframework.stereotype.Service;&#13;&#10;&#13;&#10;import java.time.LocalDateTime;&#13;&#10;import java.util.List;&#13;&#10;import java.util.UUID;&#13;&#10;&#13;&#10;@Service(AuctionConstants.BIDSERVICEIMPL)&#13;&#10;public class BidServiceImpl implements BidService {&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    @Qualifier(AuctionConstants.BIDDAOIMPL)&#13;&#10;    private BidDAO bidDao;&#13;&#10;&#13;&#10;    private static final Logger logger = LogManager.getLogger(BidServiceImpl.class);&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void placeBid(BidRequestVO request) {&#13;&#10;        try {&#13;&#10;            BidVO bid = new BidVO();&#13;&#10;            bid.setBidId(UUID.randomUUID().toString());&#13;&#10;            bid.setAmount(request.getAmount());&#13;&#10;            bid.setAuctionId(request.getAuctionId());&#13;&#10;            bid.setBidderId(request.getBidderId());&#13;&#10;            bid.setBidTime(LocalDateTime.now());&#13;&#10;&#13;&#10;            bidDao.placeBid(bid);&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in placeBid: &quot; + e.getMessage(), e);&#13;&#10;            throw e;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public List&lt;BidVO&gt; getBidsForAuction(String auctionId) {&#13;&#10;        try {&#13;&#10;            return bidDao.getBidsForAuction(auctionId);&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in getBidsForAuction: &quot; + e.getMessage(), e);&#13;&#10;            throw e;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public List&lt;BidVO&gt; getBidsForUser(String userId) {&#13;&#10;        try {&#13;&#10;            return bidDao.getBidsForUser(userId);&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in getBidsForUser: &quot; + e.getMessage(), e);&#13;&#10;            throw e;&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auctionservice/src/main/resources/postgres.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auctionservice/src/main/resources/postgres.properties" />
              <option name="originalContent" value="# Insert new auction&#10;CREATE_AUCTION=INSERT INTO auctions ( auction_id, item_name, description, starting_price, current_price, seller_id, start_time, end_time, is_active ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)&#10;&#10;# Get auction by ID (no filtering on active/inactive)&#10;FIND_AUCTION_BY_ID=SELECT * FROM auctions WHERE auction_id = ?&#10;&#10;# Get all auctions by seller (no filtering on active/inactive)&#10;FIND_AUCTIONS_BY_SELLER_ID=SELECT * FROM auctions WHERE seller_id = ?&#10;&#10;# Get all auctions (no filtering on active/inactive)&#10;FIND_ALL_AUCTIONS=SELECT * FROM auctions&#10;&#10;PLACE_BID=INSERT INTO bids (bid_id, amount, auction_id, bidder_id, bid_time) VALUES (?, ?, ?, ?, ?)&#10;GET_BIDS_FOR_AUCTION=SELECT * FROM bids WHERE auction_id = ?&#10;&#10;UPDATE_EXPIRED_AUCTIONS=UPDATE auctions SET is_active = FALSE WHERE auction_id IN (%s)" />
              <option name="updatedContent" value="# Insert new auction&#13;&#10;CREATE_AUCTION=INSERT INTO auctions ( auction_id, item_name, description, starting_price, current_price, seller_id, start_time, end_time, is_active ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)&#13;&#10;&#13;&#10;# Get auction by ID (no filtering on active/inactive)&#13;&#10;FIND_AUCTION_BY_ID=SELECT * FROM auctions WHERE auction_id = ?&#13;&#10;&#13;&#10;# Get all auctions by seller (no filtering on active/inactive)&#13;&#10;FIND_AUCTIONS_BY_SELLER_ID=SELECT * FROM auctions WHERE seller_id = ?&#13;&#10;&#13;&#10;# Get all auctions (no filtering on active/inactive)&#13;&#10;FIND_ALL_AUCTIONS=SELECT * FROM auctions&#13;&#10;&#13;&#10;# Place a bid&#13;&#10;PLACE_BID=INSERT INTO bids (bid_id, amount, auction_id, bidder_id, bid_time) VALUES (?, ?, ?, ?, ?)&#13;&#10;GET_BIDS_FOR_AUCTION=SELECT * FROM bids WHERE auction_id = ? ORDER BY bid_time DESC&#13;&#10;&#13;&#10;# NEW: Get bids for user&#13;&#10;GET_BIDS_FOR_USER=SELECT * FROM bids WHERE bidder_id = ? ORDER BY bid_time DESC&#13;&#10;&#13;&#10;# Update expired auctions&#13;&#10;UPDATE_EXPIRED_AUCTIONS=UPDATE auctions SET is_active = FALSE WHERE auction_id IN (%s)&#13;&#10;&#13;&#10;# NEW: Update auction details&#13;&#10;UPDATE_AUCTION=UPDATE auctions SET item_name = ?, description = ?, starting_price = ?, current_price = ?, end_time = ? WHERE auction_id = ?&#13;&#10;&#13;&#10;# NEW: Delete auction&#13;&#10;DELETE_AUCTION=DELETE FROM auctions WHERE auction_id = ?" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/App.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/App.css" />
              <option name="originalContent" value="#root {&#10;  max-width: 1280px;&#10;  margin: 0 auto;&#10;  padding: 2rem;&#10;  text-align: center;&#10;}&#10;&#10;.logo {&#10;  height: 6em;&#10;  padding: 1.5em;&#10;  will-change: filter;&#10;  transition: filter 300ms;&#10;}&#10;.logo:hover {&#10;  filter: drop-shadow(0 0 2em #646cffaa);&#10;}&#10;.logo.react:hover {&#10;  filter: drop-shadow(0 0 2em #61dafbaa);&#10;}&#10;&#10;@keyframes logo-spin {&#10;  from {&#10;    transform: rotate(0deg);&#10;  }&#10;  to {&#10;    transform: rotate(360deg);&#10;  }&#10;}&#10;&#10;@media (prefers-reduced-motion: no-preference) {&#10;  a:nth-of-type(2) .logo {&#10;    animation: logo-spin infinite 20s linear;&#10;  }&#10;}&#10;&#10;.card {&#10;  padding: 2em;&#10;}&#10;&#10;.read-the-docs {&#10;  color: #888;&#10;}&#10;" />
              <option name="updatedContent" value="/* Reset and Base Styles */&#10;* {&#10;  margin: 0;&#10;  padding: 0;&#10;  box-sizing: border-box;&#10;}&#10;&#10;body {&#10;  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;&#10;  line-height: 1.6;&#10;  color: #333;&#10;  background-color: #f8f9fa;&#10;}&#10;&#10;.App {&#10;  min-height: 100vh;&#10;  display: flex;&#10;  flex-direction: column;&#10;}&#10;&#10;.main-content {&#10;  flex: 1;&#10;  padding: 20px;&#10;  max-width: 1200px;&#10;  margin: 0 auto;&#10;  width: 100%;&#10;}&#10;&#10;#root {&#10;  max-width: 1280px;&#10;  margin: 0 auto;&#10;  padding: 2rem;&#10;  text-align: center;&#10;}&#10;&#10;.logo {&#10;  height: 6em;&#10;  padding: 1.5em;&#10;  will-change: filter;&#10;  transition: filter 300ms;&#10;}&#10;.logo:hover {&#10;  filter: drop-shadow(0 0 2em #646cffaa);&#10;}&#10;.logo.react:hover {&#10;  filter: drop-shadow(0 0 2em #61dafbaa);&#10;}&#10;&#10;@keyframes logo-spin {&#10;  from {&#10;    transform: rotate(0deg);&#10;  }&#10;  to {&#10;    transform: rotate(360deg);&#10;  }&#10;}&#10;&#10;@media (prefers-reduced-motion: no-preference) {&#10;  a:nth-of-type(2) .logo {&#10;    animation: logo-spin infinite 20s linear;&#10;  }&#10;}&#10;&#10;/* Button Styles */&#10;.btn {&#10;  display: inline-block;&#10;  padding: 12px 24px;&#10;  border: none;&#10;  border-radius: 8px;&#10;  font-size: 14px;&#10;  font-weight: 500;&#10;  text-decoration: none;&#10;  text-align: center;&#10;  cursor: pointer;&#10;  transition: all 0.3s ease;&#10;  min-width: 120px;&#10;}&#10;&#10;.btn:hover {&#10;  transform: translateY(-2px);&#10;  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);&#10;}&#10;&#10;.btn-primary {&#10;  background-color: #007bff;&#10;  color: white;&#10;}&#10;&#10;.btn-primary:hover {&#10;  background-color: #0056b3;&#10;}&#10;&#10;.btn-secondary {&#10;  background-color: #6c757d;&#10;  color: white;&#10;}&#10;&#10;.btn-secondary:hover {&#10;  background-color: #545b62;&#10;}&#10;&#10;.btn-danger {&#10;  background-color: #dc3545;&#10;  color: white;&#10;}&#10;&#10;.btn-danger:hover {&#10;  background-color: #c82333;&#10;}&#10;&#10;.btn-full-width {&#10;  width: 100%;&#10;}&#10;&#10;.btn:disabled {&#10;  opacity: 0.6;&#10;  cursor: not-allowed;&#10;  transform: none;&#10;}&#10;&#10;/* Form Styles */&#10;.form-group {&#10;  margin-bottom: 20px;&#10;}&#10;&#10;.form-group label {&#10;  display: block;&#10;  margin-bottom: 8px;&#10;  font-weight: 500;&#10;  color: #555;&#10;}&#10;&#10;.form-group input,&#10;.form-group textarea,&#10;.form-group select {&#10;  width: 100%;&#10;  padding: 12px 16px;&#10;  border: 2px solid #e9ecef;&#10;  border-radius: 8px;&#10;  font-size: 14px;&#10;  transition: border-color 0.3s ease;&#10;}&#10;&#10;.form-group input:focus,&#10;.form-group textarea:focus,&#10;.form-group select:focus {&#10;  outline: none;&#10;  border-color: #007bff;&#10;  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);&#10;}&#10;&#10;.form-row {&#10;  display: grid;&#10;  grid-template-columns: 1fr 1fr;&#10;  gap: 20px;&#10;}&#10;&#10;.form-actions {&#10;  display: flex;&#10;  gap: 12px;&#10;  justify-content: flex-end;&#10;  margin-top: 30px;&#10;}&#10;&#10;/* Utility Classes */&#10;.loading {&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  padding: 60px;&#10;  font-size: 18px;&#10;  color: #6c757d;&#10;}&#10;&#10;.error {&#10;  color: #dc3545;&#10;  text-align: center;&#10;  padding: 20px;&#10;  font-size: 16px;&#10;}&#10;&#10;.error-message {&#10;  background-color: #f8d7da;&#10;  color: #721c24;&#10;  padding: 12px 16px;&#10;  border-radius: 8px;&#10;  border: 1px solid #f5c6cb;&#10;  margin-bottom: 20px;&#10;}&#10;&#10;.success-message {&#10;  background-color: #d4edda;&#10;  color: #155724;&#10;  padding: 12px 16px;&#10;  border-radius: 8px;&#10;  border: 1px solid #c3e6cb;&#10;  margin-bottom: 20px;&#10;}&#10;&#10;/* Card Styles */&#10;.card {&#10;  background: white;&#10;  border-radius: 12px;&#10;  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);&#10;  padding: 24px;&#10;  margin-bottom: 20px;&#10;}&#10;&#10;/* Grid Layout */&#10;.grid {&#10;  display: grid;&#10;  gap: 20px;&#10;}&#10;&#10;.grid-2 {&#10;  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));&#10;}&#10;&#10;.grid-3 {&#10;  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));&#10;}&#10;&#10;.grid-4 {&#10;  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));&#10;}&#10;&#10;/* Responsive Design */&#10;@media (max-width: 768px) {&#10;  .main-content {&#10;    padding: 16px;&#10;  }&#10;&#10;  .form-row {&#10;    grid-template-columns: 1fr;&#10;  }&#10;&#10;  .form-actions {&#10;    flex-direction: column;&#10;  }&#10;&#10;  .btn {&#10;    width: 100%;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/App.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/App.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { useState } from 'react'&#10;import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';&#10;import { AuthProvider } from './contexts/AuthContext';&#10;import Navbar from './components/Navbar';&#10;import Home from './pages/Home';&#10;import Login from './pages/Login';&#10;import Register from './pages/Register';&#10;import AuctionDetails from './pages/AuctionDetails';&#10;import CreateAuction from './pages/CreateAuction';&#10;import Profile from './pages/Profile';&#10;import MyAuctions from './pages/MyAuctions';&#10;import MyBids from './pages/MyBids';&#10;import ProtectedRoute from './components/ProtectedRoute';&#10;import reactLogo from './assets/react.svg'&#10;import viteLogo from '/vite.svg'&#10;import './App.css'&#10;&#10;function App() {&#10;  const [count, setCount] = useState(0)&#10;&#10;  return (&#10;    &lt;AuthProvider&gt;&#10;      &lt;Router&gt;&#10;        &lt;div className=&quot;App&quot;&gt;&#10;          &lt;Navbar /&gt;&#10;          &lt;main className=&quot;main-content&quot;&gt;&#10;            &lt;Routes&gt;&#10;              &lt;Route path=&quot;/&quot; element={&lt;Home /&gt;} /&gt;&#10;              &lt;Route path=&quot;/login&quot; element={&lt;Login /&gt;} /&gt;&#10;              &lt;Route path=&quot;/register&quot; element={&lt;Register /&gt;} /&gt;&#10;              &lt;Route path=&quot;/auction/:id&quot; element={&lt;AuctionDetails /&gt;} /&gt;&#10;              &lt;Route &#10;                path=&quot;/create-auction&quot; &#10;                element={&#10;                  &lt;ProtectedRoute&gt;&#10;                    &lt;CreateAuction /&gt;&#10;                  &lt;/ProtectedRoute&gt;&#10;                } &#10;              /&gt;&#10;              &lt;Route &#10;                path=&quot;/profile&quot; &#10;                element={&#10;                  &lt;ProtectedRoute&gt;&#10;                    &lt;Profile /&gt;&#10;                  &lt;/ProtectedRoute&gt;&#10;                } &#10;              /&gt;&#10;              &lt;Route &#10;                path=&quot;/my-auctions&quot; &#10;                element={&#10;                  &lt;ProtectedRoute&gt;&#10;                    &lt;MyAuctions /&gt;&#10;                  &lt;/ProtectedRoute&gt;&#10;                } &#10;              /&gt;&#10;              &lt;Route &#10;                path=&quot;/my-bids&quot; &#10;                element={&#10;                  &lt;ProtectedRoute&gt;&#10;                    &lt;MyBids /&gt;&#10;                  &lt;/ProtectedRoute&gt;&#10;                } &#10;              /&gt;&#10;              &lt;Route path=&quot;*&quot; element={&lt;Navigate to=&quot;/&quot; replace /&gt;} /&gt;&#10;            &lt;/Routes&gt;&#10;          &lt;/main&gt;&#10;        &lt;/div&gt;&#10;      &lt;/Router&gt;&#10;    &lt;/AuthProvider&gt;&#10;  )&#10;}&#10;&#10;export default App&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';&#10;import { AuthProvider } from './contexts/AuthContext';&#10;import Navbar from './components/Navbar';&#10;import Home from './pages/Home';&#10;import Login from './pages/Login';&#10;import Register from './pages/Register';&#10;import AuctionDetails from './pages/AuctionDetails';&#10;import CreateAuction from './pages/CreateAuction';&#10;import Profile from './pages/Profile';&#10;import MyAuctions from './pages/MyAuctions';&#10;import MyBids from './pages/MyBids';&#10;import ProtectedRoute from './components/ProtectedRoute';&#10;import './App.css';&#10;&#10;function App() {&#10;  return (&#10;    &lt;AuthProvider&gt;&#10;      &lt;Router&gt;&#10;        &lt;div className=&quot;App&quot;&gt;&#10;          &lt;Navbar /&gt;&#10;          &lt;main className=&quot;main-content&quot;&gt;&#10;            &lt;Routes&gt;&#10;              &lt;Route path=&quot;/&quot; element={&lt;Home /&gt;} /&gt;&#10;              &lt;Route path=&quot;/login&quot; element={&lt;Login /&gt;} /&gt;&#10;              &lt;Route path=&quot;/register&quot; element={&lt;Register /&gt;} /&gt;&#10;              &lt;Route path=&quot;/auction/:id&quot; element={&lt;AuctionDetails /&gt;} /&gt;&#10;              &lt;Route &#10;                path=&quot;/create-auction&quot; &#10;                element={&#10;                  &lt;ProtectedRoute&gt;&#10;                    &lt;CreateAuction /&gt;&#10;                  &lt;/ProtectedRoute&gt;&#10;                } &#10;              /&gt;&#10;              &lt;Route &#10;                path=&quot;/profile&quot; &#10;                element={&#10;                  &lt;ProtectedRoute&gt;&#10;                    &lt;Profile /&gt;&#10;                  &lt;/ProtectedRoute&gt;&#10;                } &#10;              /&gt;&#10;              &lt;Route &#10;                path=&quot;/my-auctions&quot; &#10;                element={&#10;                  &lt;ProtectedRoute&gt;&#10;                    &lt;MyAuctions /&gt;&#10;                  &lt;/ProtectedRoute&gt;&#10;                } &#10;              /&gt;&#10;              &lt;Route &#10;                path=&quot;/my-bids&quot; &#10;                element={&#10;                  &lt;ProtectedRoute&gt;&#10;                    &lt;MyBids /&gt;&#10;                  &lt;/ProtectedRoute&gt;&#10;                } &#10;              /&gt;&#10;              &lt;Route path=&quot;*&quot; element={&lt;Navigate to=&quot;/&quot; replace /&gt;} /&gt;&#10;            &lt;/Routes&gt;&#10;          &lt;/main&gt;&#10;        &lt;/div&gt;&#10;      &lt;/Router&gt;&#10;    &lt;/AuthProvider&gt;&#10;  );&#10;}&#10;&#10;export default App;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/Navbar.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/Navbar.css" />
              <option name="updatedContent" value=".navbar {&#10;  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);&#10;  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);&#10;  position: sticky;&#10;  top: 0;&#10;  z-index: 1000;&#10;}&#10;&#10;.navbar-container {&#10;  max-width: 1200px;&#10;  margin: 0 auto;&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  padding: 0 20px;&#10;  height: 70px;&#10;}&#10;&#10;.navbar-brand {&#10;  font-size: 24px;&#10;  font-weight: bold;&#10;  color: white;&#10;  text-decoration: none;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 8px;&#10;}&#10;&#10;.navbar-brand:hover {&#10;  color: #f8f9fa;&#10;  text-decoration: none;&#10;}&#10;&#10;.navbar-menu {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 20px;&#10;}&#10;&#10;.navbar-item {&#10;  color: white;&#10;  text-decoration: none;&#10;  padding: 10px 16px;&#10;  border-radius: 6px;&#10;  font-weight: 500;&#10;  transition: all 0.3s ease;&#10;  background: none;&#10;  border: none;&#10;  cursor: pointer;&#10;  font-size: 14px;&#10;}&#10;&#10;.navbar-item:hover {&#10;  background-color: rgba(255, 255, 255, 0.1);&#10;  color: white;&#10;  text-decoration: none;&#10;}&#10;&#10;.register-btn {&#10;  background-color: rgba(255, 255, 255, 0.2);&#10;  border: 2px solid white;&#10;}&#10;&#10;.register-btn:hover {&#10;  background-color: white;&#10;  color: #667eea;&#10;}&#10;&#10;/* Dropdown Styles */&#10;.navbar-dropdown {&#10;  position: relative;&#10;}&#10;&#10;.dropdown-trigger {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 8px;&#10;}&#10;&#10;.dropdown-content {&#10;  position: absolute;&#10;  top: 100%;&#10;  right: 0;&#10;  background: white;&#10;  border-radius: 8px;&#10;  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);&#10;  min-width: 160px;&#10;  opacity: 0;&#10;  visibility: hidden;&#10;  transform: translateY(-10px);&#10;  transition: all 0.3s ease;&#10;  z-index: 1001;&#10;  margin-top: 8px;&#10;}&#10;&#10;.navbar-dropdown:hover .dropdown-content {&#10;  opacity: 1;&#10;  visibility: visible;&#10;  transform: translateY(0);&#10;}&#10;&#10;.dropdown-item {&#10;  display: block;&#10;  padding: 12px 16px;&#10;  color: #333;&#10;  text-decoration: none;&#10;  background: none;&#10;  border: none;&#10;  width: 100%;&#10;  text-align: left;&#10;  cursor: pointer;&#10;  font-size: 14px;&#10;  transition: background-color 0.2s ease;&#10;}&#10;&#10;.dropdown-item:hover {&#10;  background-color: #f8f9fa;&#10;  color: #333;&#10;  text-decoration: none;&#10;}&#10;&#10;.dropdown-item:first-child {&#10;  border-radius: 8px 8px 0 0;&#10;}&#10;&#10;.dropdown-item:last-child {&#10;  border-radius: 0 0 8px 8px;&#10;}&#10;&#10;.logout-btn {&#10;  color: #dc3545;&#10;  border-top: 1px solid #e9ecef;&#10;}&#10;&#10;.logout-btn:hover {&#10;  background-color: #f8d7da;&#10;  color: #721c24;&#10;}&#10;&#10;/* Mobile Responsive */&#10;@media (max-width: 768px) {&#10;  .navbar-container {&#10;    flex-direction: column;&#10;    height: auto;&#10;    padding: 16px 20px;&#10;  }&#10;&#10;  .navbar-menu {&#10;    margin-top: 12px;&#10;    flex-wrap: wrap;&#10;    justify-content: center;&#10;    gap: 12px;&#10;  }&#10;&#10;  .navbar-item {&#10;    padding: 8px 12px;&#10;    font-size: 13px;&#10;  }&#10;&#10;  .dropdown-content {&#10;    position: fixed;&#10;    right: 20px;&#10;  }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;  .navbar-brand {&#10;    font-size: 20px;&#10;  }&#10;&#10;  .navbar-menu {&#10;    gap: 8px;&#10;  }&#10;&#10;  .navbar-item {&#10;    padding: 6px 10px;&#10;    font-size: 12px;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/Navbar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/Navbar.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { Link, useNavigate } from 'react-router-dom';&#10;import { useAuth } from '../contexts/AuthContext';&#10;import './Navbar.css';&#10;&#10;const Navbar: React.FC = () =&gt; {&#10;  const { user, isAuthenticated, logout } = useAuth();&#10;  const navigate = useNavigate();&#10;&#10;  const handleLogout = () =&gt; {&#10;    logout();&#10;    navigate('/');&#10;  };&#10;&#10;  return (&#10;    &lt;nav className=&quot;navbar&quot;&gt;&#10;      &lt;div className=&quot;navbar-container&quot;&gt;&#10;        &lt;Link to=&quot;/&quot; className=&quot;navbar-brand&quot;&gt;&#10;          ️ Auction House&#10;        &lt;/Link&gt;&#10;        &#10;        &lt;div className=&quot;navbar-menu&quot;&gt;&#10;          &lt;Link to=&quot;/&quot; className=&quot;navbar-item&quot;&gt;Home&lt;/Link&gt;&#10;          &#10;          {isAuthenticated ? (&#10;            &lt;&gt;&#10;              &lt;Link to=&quot;/create-auction&quot; className=&quot;navbar-item&quot;&gt;Create Auction&lt;/Link&gt;&#10;              &lt;Link to=&quot;/my-auctions&quot; className=&quot;navbar-item&quot;&gt;My Auctions&lt;/Link&gt;&#10;              &lt;Link to=&quot;/my-bids&quot; className=&quot;navbar-item&quot;&gt;My Bids&lt;/Link&gt;&#10;              &lt;div className=&quot;navbar-dropdown&quot;&gt;&#10;                &lt;button className=&quot;navbar-item dropdown-trigger&quot;&gt;&#10;                   {user?.username}&#10;                &lt;/button&gt;&#10;                &lt;div className=&quot;dropdown-content&quot;&gt;&#10;                  &lt;Link to=&quot;/profile&quot; className=&quot;dropdown-item&quot;&gt;Profile&lt;/Link&gt;&#10;                  &lt;button onClick={handleLogout} className=&quot;dropdown-item logout-btn&quot;&gt;&#10;                    Logout&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/&gt;&#10;          ) : (&#10;            &lt;&gt;&#10;              &lt;Link to=&quot;/login&quot; className=&quot;navbar-item&quot;&gt;Login&lt;/Link&gt;&#10;              &lt;Link to=&quot;/register&quot; className=&quot;navbar-item register-btn&quot;&gt;Register&lt;/Link&gt;&#10;            &lt;/&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/nav&gt;&#10;  );&#10;};&#10;&#10;export default Navbar;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/ProtectedRoute.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/ProtectedRoute.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { Navigate } from 'react-router-dom';&#10;import { useAuth } from '../contexts/AuthContext';&#10;&#10;interface ProtectedRouteProps {&#10;  children: React.ReactNode;&#10;}&#10;&#10;const ProtectedRoute: React.FC&lt;ProtectedRouteProps&gt; = ({ children }) =&gt; {&#10;  const { isAuthenticated, loading } = useAuth();&#10;&#10;  if (loading) {&#10;    return &lt;div className=&quot;loading&quot;&gt;Loading...&lt;/div&gt;;&#10;  }&#10;&#10;  return isAuthenticated ? &lt;&gt;{children}&lt;/&gt; : &lt;Navigate to=&quot;/login&quot; replace /&gt;;&#10;};&#10;&#10;export default ProtectedRoute;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/contexts/AuthContext.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/contexts/AuthContext.tsx" />
              <option name="updatedContent" value="import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';&#10;import { User, LoginRequest, RegisterRequest } from '../types';&#10;import { authService } from '../services/api';&#10;&#10;interface AuthContextType {&#10;  user: User | null;&#10;  isAuthenticated: boolean;&#10;  login: (loginRequest: LoginRequest) =&gt; Promise&lt;void&gt;;&#10;  register: (registerRequest: RegisterRequest) =&gt; Promise&lt;void&gt;;&#10;  logout: () =&gt; void;&#10;  loading: boolean;&#10;}&#10;&#10;const AuthContext = createContext&lt;AuthContextType | undefined&gt;(undefined);&#10;&#10;export const useAuth = () =&gt; {&#10;  const context = useContext(AuthContext);&#10;  if (context === undefined) {&#10;    throw new Error('useAuth must be used within an AuthProvider');&#10;  }&#10;  return context;&#10;};&#10;&#10;interface AuthProviderProps {&#10;  children: ReactNode;&#10;}&#10;&#10;export const AuthProvider: React.FC&lt;AuthProviderProps&gt; = ({ children }) =&gt; {&#10;  const [user, setUser] = useState&lt;User | null&gt;(null);&#10;  const [loading, setLoading] = useState(true);&#10;&#10;  useEffect(() =&gt; {&#10;    // Check if user is logged in on app start&#10;    const savedUser = authService.getCurrentUser();&#10;    if (savedUser &amp;&amp; authService.isAuthenticated()) {&#10;      setUser(savedUser);&#10;    }&#10;    setLoading(false);&#10;  }, []);&#10;&#10;  const login = async (loginRequest: LoginRequest) =&gt; {&#10;    try {&#10;      const response = await authService.login(loginRequest);&#10;      localStorage.setItem('authToken', response.token);&#10;      localStorage.setItem('user', JSON.stringify(response.user));&#10;      setUser(response.user);&#10;    } catch (error) {&#10;      console.error('Login failed:', error);&#10;      throw error;&#10;    }&#10;  };&#10;&#10;  const register = async (registerRequest: RegisterRequest) =&gt; {&#10;    try {&#10;      const user = await authService.register(registerRequest);&#10;      // After registration, user needs to login&#10;      console.log('Registration successful:', user);&#10;    } catch (error) {&#10;      console.error('Registration failed:', error);&#10;      throw error;&#10;    }&#10;  };&#10;&#10;  const logout = () =&gt; {&#10;    authService.logout();&#10;    setUser(null);&#10;  };&#10;&#10;  const value = {&#10;    user,&#10;    isAuthenticated: !!user,&#10;    login,&#10;    register,&#10;    logout,&#10;    loading&#10;  };&#10;&#10;  return (&#10;    &lt;AuthContext.Provider value={value}&gt;&#10;      {children}&#10;    &lt;/AuthContext.Provider&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/AuctionDetails.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/AuctionDetails.css" />
              <option name="updatedContent" value=".auction-details {&#10;  max-width: 1000px;&#10;  margin: 0 auto;&#10;  padding: 20px;&#10;}&#10;&#10;.back-btn {&#10;  background: none;&#10;  border: 1px solid #6c757d;&#10;  color: #6c757d;&#10;  padding: 8px 16px;&#10;  border-radius: 6px;&#10;  font-size: 14px;&#10;  cursor: pointer;&#10;  margin-bottom: 24px;&#10;  transition: all 0.3s ease;&#10;}&#10;&#10;.back-btn:hover {&#10;  background-color: #6c757d;&#10;  color: white;&#10;}&#10;&#10;.auction-header {&#10;  display: grid;&#10;  grid-template-columns: 1fr 1.5fr;&#10;  gap: 40px;&#10;  margin-bottom: 40px;&#10;  background: white;&#10;  border-radius: 16px;&#10;  padding: 32px;&#10;  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);&#10;}&#10;&#10;.auction-image {&#10;  width: 100%;&#10;  height: 400px;&#10;  border-radius: 12px;&#10;  overflow: hidden;&#10;  background: #f8f9fa;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;}&#10;&#10;.auction-image img {&#10;  width: 100%;&#10;  height: 100%;&#10;  object-fit: cover;&#10;}&#10;&#10;.placeholder-image {&#10;  font-size: 4rem;&#10;  color: #6c757d;&#10;}&#10;&#10;.auction-info h1 {&#10;  font-size: 2.2rem;&#10;  font-weight: 700;&#10;  margin-bottom: 16px;&#10;  color: #333;&#10;  line-height: 1.3;&#10;}&#10;&#10;.description {&#10;  font-size: 1.1rem;&#10;  color: #6c757d;&#10;  line-height: 1.6;&#10;  margin-bottom: 32px;&#10;}&#10;&#10;.auction-stats {&#10;  display: grid;&#10;  grid-template-columns: 1fr 1fr;&#10;  gap: 16px;&#10;  margin-bottom: 32px;&#10;}&#10;&#10;.stat {&#10;  background: #f8f9fa;&#10;  padding: 16px;&#10;  border-radius: 8px;&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 4px;&#10;}&#10;&#10;.stat .label {&#10;  font-size: 0.85rem;&#10;  color: #6c757d;&#10;  font-weight: 500;&#10;}&#10;&#10;.stat .value {&#10;  font-size: 1.2rem;&#10;  font-weight: 700;&#10;  color: #333;&#10;}&#10;&#10;.auction-timing {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 12px;&#10;  padding: 20px;&#10;  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);&#10;  border-radius: 12px;&#10;  color: white;&#10;}&#10;&#10;.time-info {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;}&#10;&#10;.time-info .label {&#10;  font-size: 0.9rem;&#10;  opacity: 0.9;&#10;}&#10;&#10;.time-info .value {&#10;  font-weight: 600;&#10;}&#10;&#10;.status {&#10;  text-align: center;&#10;  padding: 8px;&#10;  border-radius: 6px;&#10;  background: rgba(255, 255, 255, 0.2);&#10;  font-weight: 600;&#10;}&#10;&#10;.status-active {&#10;  color: #28a745;&#10;}&#10;&#10;.status-ended {&#10;  color: #dc3545;&#10;}&#10;&#10;.bid-section {&#10;  background: white;&#10;  border-radius: 16px;&#10;  padding: 32px;&#10;  margin-bottom: 32px;&#10;  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);&#10;}&#10;&#10;.bid-section h3 {&#10;  font-size: 1.5rem;&#10;  margin-bottom: 20px;&#10;  color: #333;&#10;}&#10;&#10;.bid-form {&#10;  max-width: 400px;&#10;}&#10;&#10;.bid-input {&#10;  display: flex;&#10;  gap: 12px;&#10;  margin-bottom: 12px;&#10;}&#10;&#10;.bid-input input {&#10;  flex: 1;&#10;  padding: 12px 16px;&#10;  border: 2px solid #e9ecef;&#10;  border-radius: 8px;&#10;  font-size: 16px;&#10;}&#10;&#10;.bid-input input:focus {&#10;  outline: none;&#10;  border-color: #007bff;&#10;  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);&#10;}&#10;&#10;.bid-hint {&#10;  font-size: 0.85rem;&#10;  color: #6c757d;&#10;  margin: 0;&#10;}&#10;&#10;.login-prompt {&#10;  background: #e3f2fd;&#10;  border: 1px solid #90caf9;&#10;  border-radius: 8px;&#10;  padding: 20px;&#10;  text-align: center;&#10;  margin-bottom: 32px;&#10;}&#10;&#10;.login-prompt a {&#10;  color: #1976d2;&#10;  text-decoration: none;&#10;  font-weight: 500;&#10;}&#10;&#10;.login-prompt a:hover {&#10;  text-decoration: underline;&#10;}&#10;&#10;.bids-section {&#10;  background: white;&#10;  border-radius: 16px;&#10;  padding: 32px;&#10;  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);&#10;}&#10;&#10;.bids-section h3 {&#10;  font-size: 1.5rem;&#10;  margin-bottom: 24px;&#10;  color: #333;&#10;}&#10;&#10;.bids-list {&#10;  max-height: 400px;&#10;  overflow-y: auto;&#10;}&#10;&#10;.bid-item {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  padding: 16px;&#10;  border-bottom: 1px solid #e9ecef;&#10;  transition: background-color 0.2s ease;&#10;}&#10;&#10;.bid-item:hover {&#10;  background-color: #f8f9fa;&#10;}&#10;&#10;.bid-item:last-child {&#10;  border-bottom: none;&#10;}&#10;&#10;.bid-amount {&#10;  font-size: 1.2rem;&#10;  font-weight: 700;&#10;  color: #28a745;&#10;}&#10;&#10;.bid-details {&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: flex-end;&#10;  gap: 4px;&#10;}&#10;&#10;.bidder {&#10;  font-weight: 600;&#10;  color: #333;&#10;}&#10;&#10;.bid-time {&#10;  font-size: 0.85rem;&#10;  color: #6c757d;&#10;}&#10;&#10;/* Responsive Design */&#10;@media (max-width: 768px) {&#10;  .auction-header {&#10;    grid-template-columns: 1fr;&#10;    gap: 24px;&#10;    padding: 24px;&#10;  }&#10;&#10;  .auction-image {&#10;    height: 300px;&#10;  }&#10;&#10;  .auction-info h1 {&#10;    font-size: 1.8rem;&#10;  }&#10;&#10;  .auction-stats {&#10;    grid-template-columns: 1fr;&#10;  }&#10;&#10;  .bid-input {&#10;    flex-direction: column;&#10;  }&#10;&#10;  .bid-input .btn {&#10;    width: 100%;&#10;  }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;  .auction-details {&#10;    padding: 16px;&#10;  }&#10;&#10;  .auction-header,&#10;  .bid-section,&#10;  .bids-section {&#10;    padding: 20px;&#10;  }&#10;&#10;  .auction-info h1 {&#10;    font-size: 1.5rem;&#10;  }&#10;&#10;  .description {&#10;    font-size: 1rem;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/AuctionDetails.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/AuctionDetails.tsx" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { useParams, useNavigate } from 'react-router-dom';&#10;import { Auction, Bid } from '../types';&#10;import { auctionService, bidService } from '../services/api';&#10;import { useAuth } from '../contexts/AuthContext';&#10;import './AuctionDetails.css';&#10;&#10;const AuctionDetails: React.FC = () =&gt; {&#10;  const { id } = useParams&lt;{ id: string }&gt;();&#10;  const { user, isAuthenticated } = useAuth();&#10;  const navigate = useNavigate();&#10;  &#10;  const [auction, setAuction] = useState&lt;Auction | null&gt;(null);&#10;  const [bids, setBids] = useState&lt;Bid[]&gt;([]);&#10;  const [bidAmount, setBidAmount] = useState('');&#10;  const [loading, setLoading] = useState(true);&#10;  const [bidLoading, setBidLoading] = useState(false);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;  useEffect(() =&gt; {&#10;    const fetchAuctionData = async () =&gt; {&#10;      if (!id) return;&#10;      &#10;      try {&#10;        setLoading(true);&#10;        const [auctionData, bidsData] = await Promise.all([&#10;          auctionService.getAuctionById(id),&#10;          bidService.getBidsForAuction(id)&#10;        ]);&#10;        setAuction(auctionData);&#10;        setBids(bidsData);&#10;        setBidAmount((auctionData.currentBid + auctionData.minBidIncrement).toString());&#10;      } catch (err) {&#10;        setError('Failed to fetch auction details');&#10;        console.error('Error fetching auction:', err);&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    };&#10;&#10;    fetchAuctionData();&#10;  }, [id]);&#10;&#10;  const handlePlaceBid = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!auction || !isAuthenticated) return;&#10;&#10;    const amount = parseFloat(bidAmount);&#10;    if (amount &lt;= auction.currentBid) {&#10;      setError('Bid must be higher than current bid');&#10;      return;&#10;    }&#10;&#10;    try {&#10;      setBidLoading(true);&#10;      setError(null);&#10;      await bidService.placeBid(auction.id, amount);&#10;      &#10;      // Refresh auction and bids data&#10;      const [updatedAuction, updatedBids] = await Promise.all([&#10;        auctionService.getAuctionById(auction.id),&#10;        bidService.getBidsForAuction(auction.id)&#10;      ]);&#10;      &#10;      setAuction(updatedAuction);&#10;      setBids(updatedBids);&#10;      setBidAmount((updatedAuction.currentBid + updatedAuction.minBidIncrement).toString());&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to place bid');&#10;    } finally {&#10;      setBidLoading(false);&#10;    }&#10;  };&#10;&#10;  const formatPrice = (price: number) =&gt; {&#10;    return new Intl.NumberFormat('en-US', {&#10;      style: 'currency',&#10;      currency: 'USD'&#10;    }).format(price);&#10;  };&#10;&#10;  const formatDateTime = (dateTime: string) =&gt; {&#10;    return new Date(dateTime).toLocaleString();&#10;  };&#10;&#10;  const isAuctionEnded = () =&gt; {&#10;    if (!auction) return false;&#10;    return new Date() &gt; new Date(auction.endTime);&#10;  };&#10;&#10;  if (loading) {&#10;    return &lt;div className=&quot;loading&quot;&gt;Loading auction details...&lt;/div&gt;;&#10;  }&#10;&#10;  if (!auction) {&#10;    return &lt;div className=&quot;error&quot;&gt;Auction not found&lt;/div&gt;;&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;auction-details&quot;&gt;&#10;      &lt;button onClick={() =&gt; navigate(-1)} className=&quot;back-btn&quot;&gt;&#10;        ← Back&#10;      &lt;/button&gt;&#10;&#10;      &lt;div className=&quot;auction-header&quot;&gt;&#10;        &lt;div className=&quot;auction-image&quot;&gt;&#10;          {auction.imageUrl ? (&#10;            &lt;img src={auction.imageUrl} alt={auction.title} /&gt;&#10;          ) : (&#10;            &lt;div className=&quot;placeholder-image&quot;&gt;&lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;        &#10;        &lt;div className=&quot;auction-info&quot;&gt;&#10;          &lt;h1&gt;{auction.title}&lt;/h1&gt;&#10;          &lt;p className=&quot;description&quot;&gt;{auction.description}&lt;/p&gt;&#10;          &#10;          &lt;div className=&quot;auction-stats&quot;&gt;&#10;            &lt;div className=&quot;stat&quot;&gt;&#10;              &lt;span className=&quot;label&quot;&gt;Current Bid:&lt;/span&gt;&#10;              &lt;span className=&quot;value&quot;&gt;{formatPrice(auction.currentBid)}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;stat&quot;&gt;&#10;              &lt;span className=&quot;label&quot;&gt;Starting Bid:&lt;/span&gt;&#10;              &lt;span className=&quot;value&quot;&gt;{formatPrice(auction.startingBid)}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;stat&quot;&gt;&#10;              &lt;span className=&quot;label&quot;&gt;Bid Increment:&lt;/span&gt;&#10;              &lt;span className=&quot;value&quot;&gt;{formatPrice(auction.minBidIncrement)}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;stat&quot;&gt;&#10;              &lt;span className=&quot;label&quot;&gt;Total Bids:&lt;/span&gt;&#10;              &lt;span className=&quot;value&quot;&gt;{auction.bidCount}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;auction-timing&quot;&gt;&#10;            &lt;div className=&quot;time-info&quot;&gt;&#10;              &lt;span className=&quot;label&quot;&gt;Started:&lt;/span&gt;&#10;              &lt;span className=&quot;value&quot;&gt;{formatDateTime(auction.startTime)}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;time-info&quot;&gt;&#10;              &lt;span className=&quot;label&quot;&gt;Ends:&lt;/span&gt;&#10;              &lt;span className=&quot;value&quot;&gt;{formatDateTime(auction.endTime)}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;status&quot;&gt;&#10;              Status: &lt;span className={`status-${auction.status.toLowerCase()}`}&gt;&#10;                {isAuctionEnded() ? 'ENDED' : auction.status}&#10;              &lt;/span&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {isAuthenticated &amp;&amp; !isAuctionEnded() &amp;&amp; user?.id !== auction.sellerId &amp;&amp; (&#10;        &lt;div className=&quot;bid-section&quot;&gt;&#10;          &lt;h3&gt;Place Your Bid&lt;/h3&gt;&#10;          {error &amp;&amp; &lt;div className=&quot;error-message&quot;&gt;{error}&lt;/div&gt;}&#10;          &#10;          &lt;form onSubmit={handlePlaceBid} className=&quot;bid-form&quot;&gt;&#10;            &lt;div className=&quot;bid-input&quot;&gt;&#10;              &lt;input&#10;                type=&quot;number&quot;&#10;                value={bidAmount}&#10;                onChange={(e) =&gt; setBidAmount(e.target.value)}&#10;                min={auction.currentBid + auction.minBidIncrement}&#10;                step=&quot;0.01&quot;&#10;                required&#10;                placeholder=&quot;Enter bid amount&quot;&#10;              /&gt;&#10;              &lt;button type=&quot;submit&quot; disabled={bidLoading} className=&quot;btn btn-primary&quot;&gt;&#10;                {bidLoading ? 'Placing Bid...' : 'Place Bid'}&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;            &lt;p className=&quot;bid-hint&quot;&gt;&#10;              Minimum bid: {formatPrice(auction.currentBid + auction.minBidIncrement)}&#10;            &lt;/p&gt;&#10;          &lt;/form&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {!isAuthenticated &amp;&amp; (&#10;        &lt;div className=&quot;login-prompt&quot;&gt;&#10;          &lt;p&gt;Please &lt;a href=&quot;/login&quot;&gt;login&lt;/a&gt; to place bids on this auction.&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      &lt;div className=&quot;bids-section&quot;&gt;&#10;        &lt;h3&gt;Bid History&lt;/h3&gt;&#10;        {bids.length === 0 ? (&#10;          &lt;p&gt;No bids yet. Be the first to bid!&lt;/p&gt;&#10;        ) : (&#10;          &lt;div className=&quot;bids-list&quot;&gt;&#10;            {bids.map((bid) =&gt; (&#10;              &lt;div key={bid.id} className=&quot;bid-item&quot;&gt;&#10;                &lt;div className=&quot;bid-amount&quot;&gt;{formatPrice(bid.amount)}&lt;/div&gt;&#10;                &lt;div className=&quot;bid-details&quot;&gt;&#10;                  &lt;span className=&quot;bidder&quot;&gt;{bid.bidderName}&lt;/span&gt;&#10;                  &lt;span className=&quot;bid-time&quot;&gt;{formatDateTime(bid.timestamp)}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default AuctionDetails;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/CreateAuction.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/CreateAuction.css" />
              <option name="updatedContent" value=".create-auction {&#10;  max-width: 800px;&#10;  margin: 0 auto;&#10;  padding: 20px;&#10;}&#10;&#10;.create-auction-container {&#10;  background: white;&#10;  border-radius: 16px;&#10;  padding: 40px;&#10;  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);&#10;}&#10;&#10;.create-auction-container h2 {&#10;  font-size: 2rem;&#10;  font-weight: 700;&#10;  margin-bottom: 32px;&#10;  color: #333;&#10;  text-align: center;&#10;}&#10;&#10;.auction-form .form-group {&#10;  margin-bottom: 24px;&#10;}&#10;&#10;.auction-form .form-row {&#10;  display: grid;&#10;  grid-template-columns: 1fr 1fr;&#10;  gap: 20px;&#10;  margin-bottom: 24px;&#10;}&#10;&#10;.auction-form .form-row .form-group {&#10;  margin-bottom: 0;&#10;}&#10;&#10;.auction-form input,&#10;.auction-form textarea,&#10;.auction-form select {&#10;  padding: 14px 16px;&#10;  border: 2px solid #e9ecef;&#10;  border-radius: 8px;&#10;  font-size: 16px;&#10;  transition: all 0.3s ease;&#10;}&#10;&#10;.auction-form textarea {&#10;  resize: vertical;&#10;  min-height: 100px;&#10;  font-family: inherit;&#10;}&#10;&#10;.auction-form input:focus,&#10;.auction-form textarea:focus,&#10;.auction-form select:focus {&#10;  outline: none;&#10;  border-color: #007bff;&#10;  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);&#10;}&#10;&#10;.auction-form label {&#10;  font-weight: 600;&#10;  color: #333;&#10;  margin-bottom: 8px;&#10;  display: block;&#10;}&#10;&#10;.auction-form small {&#10;  display: block;&#10;  margin-top: 6px;&#10;  font-size: 0.85rem;&#10;  color: #6c757d;&#10;}&#10;&#10;.form-actions {&#10;  display: flex;&#10;  gap: 16px;&#10;  justify-content: flex-end;&#10;  margin-top: 40px;&#10;  padding-top: 24px;&#10;  border-top: 1px solid #e9ecef;&#10;}&#10;&#10;.form-actions .btn {&#10;  min-width: 140px;&#10;  padding: 14px 24px;&#10;  font-size: 16px;&#10;  font-weight: 600;&#10;}&#10;&#10;/* Input Styling */&#10;.auction-form input[type=&quot;number&quot;] {&#10;  text-align: right;&#10;}&#10;&#10;.auction-form input[type=&quot;datetime-local&quot;] {&#10;  position: relative;&#10;}&#10;&#10;.auction-form select {&#10;  cursor: pointer;&#10;  background-image: url(&quot;data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e&quot;);&#10;  background-position: right 12px center;&#10;  background-repeat: no-repeat;&#10;  background-size: 16px;&#10;  padding-right: 40px;&#10;  appearance: none;&#10;}&#10;&#10;/* Validation States */&#10;.auction-form input:invalid {&#10;  border-color: #dc3545;&#10;}&#10;&#10;.auction-form input:valid {&#10;  border-color: #28a745;&#10;}&#10;&#10;/* Error Messages */&#10;.error-message {&#10;  background-color: #f8d7da;&#10;  color: #721c24;&#10;  padding: 12px 16px;&#10;  border-radius: 8px;&#10;  border: 1px solid #f5c6cb;&#10;  margin-bottom: 24px;&#10;  font-size: 14px;&#10;}&#10;&#10;/* Loading State */&#10;.auction-form .btn:disabled {&#10;  opacity: 0.6;&#10;  cursor: not-allowed;&#10;  transform: none;&#10;}&#10;&#10;/* Character Counter for Description */&#10;.auction-form textarea + .char-counter {&#10;  text-align: right;&#10;  font-size: 0.8rem;&#10;  color: #6c757d;&#10;  margin-top: 4px;&#10;}&#10;&#10;/* Required Field Indicators */&#10;.auction-form label[for=&quot;title&quot;]::after,&#10;.auction-form label[for=&quot;description&quot;]::after,&#10;.auction-form label[for=&quot;startingBid&quot;]::after,&#10;.auction-form label[for=&quot;minBidIncrement&quot;]::after,&#10;.auction-form label[for=&quot;endTime&quot;]::after {&#10;  content: &quot; *&quot;;&#10;  color: #dc3545;&#10;}&#10;&#10;/* Responsive Design */&#10;@media (max-width: 768px) {&#10;  .create-auction {&#10;    padding: 16px;&#10;  }&#10;&#10;  .create-auction-container {&#10;    padding: 24px;&#10;  }&#10;&#10;  .create-auction-container h2 {&#10;    font-size: 1.6rem;&#10;    margin-bottom: 24px;&#10;  }&#10;&#10;  .auction-form .form-row {&#10;    grid-template-columns: 1fr;&#10;    gap: 0;&#10;  }&#10;&#10;  .auction-form .form-row .form-group {&#10;    margin-bottom: 24px;&#10;  }&#10;&#10;  .form-actions {&#10;    flex-direction: column;&#10;  }&#10;&#10;  .form-actions .btn {&#10;    width: 100%;&#10;  }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;  .create-auction-container {&#10;    padding: 20px;&#10;    margin: 0 8px;&#10;  }&#10;&#10;  .auction-form input,&#10;  .auction-form textarea,&#10;  .auction-form select {&#10;    font-size: 14px;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/CreateAuction.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/CreateAuction.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { useNavigate } from 'react-router-dom';&#10;import { auctionService } from '../services/api';&#10;import { useAuth } from '../contexts/AuthContext';&#10;import './CreateAuction.css';&#10;&#10;const CreateAuction: React.FC = () =&gt; {&#10;  const { user } = useAuth();&#10;  const navigate = useNavigate();&#10;  &#10;  const [formData, setFormData] = useState({&#10;    title: '',&#10;    description: '',&#10;    startingBid: '',&#10;    minBidIncrement: '',&#10;    endTime: '',&#10;    imageUrl: '',&#10;    category: ''&#10;  });&#10;  const [loading, setLoading] = useState(false);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;  const handleChange = (e: React.ChangeEvent&lt;HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement&gt;) =&gt; {&#10;    setFormData({&#10;      ...formData,&#10;      [e.target.name]: e.target.value&#10;    });&#10;  };&#10;&#10;  const handleSubmit = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!user) return;&#10;&#10;    setLoading(true);&#10;    setError(null);&#10;&#10;    try {&#10;      const auctionData = {&#10;        title: formData.title,&#10;        description: formData.description,&#10;        startingBid: parseFloat(formData.startingBid),&#10;        currentBid: parseFloat(formData.startingBid),&#10;        minBidIncrement: parseFloat(formData.minBidIncrement),&#10;        startTime: new Date().toISOString(),&#10;        endTime: new Date(formData.endTime).toISOString(),&#10;        status: 'ACTIVE' as const,&#10;        sellerId: user.id,&#10;        sellerName: user.fullName,&#10;        imageUrl: formData.imageUrl || undefined,&#10;        category: formData.category || undefined,&#10;        bidCount: 0&#10;      };&#10;&#10;      const createdAuction = await auctionService.createAuction(auctionData);&#10;      navigate(`/auction/${createdAuction.id}`);&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to create auction');&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  // Generate minimum date (1 hour from now)&#10;  const getMinDateTime = () =&gt; {&#10;    const now = new Date();&#10;    now.setHours(now.getHours() + 1);&#10;    return now.toISOString().slice(0, 16);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;create-auction&quot;&gt;&#10;      &lt;div className=&quot;create-auction-container&quot;&gt;&#10;        &lt;h2&gt;Create New Auction&lt;/h2&gt;&#10;        &#10;        {error &amp;&amp; &lt;div className=&quot;error-message&quot;&gt;{error}&lt;/div&gt;}&#10;        &#10;        &lt;form onSubmit={handleSubmit} className=&quot;auction-form&quot;&gt;&#10;          &lt;div className=&quot;form-group&quot;&gt;&#10;            &lt;label htmlFor=&quot;title&quot;&gt;Auction Title *&lt;/label&gt;&#10;            &lt;input&#10;              type=&quot;text&quot;&#10;              id=&quot;title&quot;&#10;              name=&quot;title&quot;&#10;              value={formData.title}&#10;              onChange={handleChange}&#10;              required&#10;              placeholder=&quot;Enter a descriptive title for your item&quot;&#10;              maxLength={100}&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;form-group&quot;&gt;&#10;            &lt;label htmlFor=&quot;description&quot;&gt;Description *&lt;/label&gt;&#10;            &lt;textarea&#10;              id=&quot;description&quot;&#10;              name=&quot;description&quot;&#10;              value={formData.description}&#10;              onChange={handleChange}&#10;              required&#10;              placeholder=&quot;Describe your item in detail...&quot;&#10;              rows={4}&#10;              maxLength={500}&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;form-row&quot;&gt;&#10;            &lt;div className=&quot;form-group&quot;&gt;&#10;              &lt;label htmlFor=&quot;startingBid&quot;&gt;Starting Bid ($) *&lt;/label&gt;&#10;              &lt;input&#10;                type=&quot;number&quot;&#10;                id=&quot;startingBid&quot;&#10;                name=&quot;startingBid&quot;&#10;                value={formData.startingBid}&#10;                onChange={handleChange}&#10;                required&#10;                min=&quot;0.01&quot;&#10;                step=&quot;0.01&quot;&#10;                placeholder=&quot;0.00&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;form-group&quot;&gt;&#10;              &lt;label htmlFor=&quot;minBidIncrement&quot;&gt;Min Bid Increment ($) *&lt;/label&gt;&#10;              &lt;input&#10;                type=&quot;number&quot;&#10;                id=&quot;minBidIncrement&quot;&#10;                name=&quot;minBidIncrement&quot;&#10;                value={formData.minBidIncrement}&#10;                onChange={handleChange}&#10;                required&#10;                min=&quot;0.01&quot;&#10;                step=&quot;0.01&quot;&#10;                placeholder=&quot;1.00&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;form-group&quot;&gt;&#10;            &lt;label htmlFor=&quot;endTime&quot;&gt;Auction End Time *&lt;/label&gt;&#10;            &lt;input&#10;              type=&quot;datetime-local&quot;&#10;              id=&quot;endTime&quot;&#10;              name=&quot;endTime&quot;&#10;              value={formData.endTime}&#10;              onChange={handleChange}&#10;              required&#10;              min={getMinDateTime()}&#10;            /&gt;&#10;            &lt;small&gt;Auction must run for at least 1 hour&lt;/small&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;form-group&quot;&gt;&#10;            &lt;label htmlFor=&quot;category&quot;&gt;Category&lt;/label&gt;&#10;            &lt;select&#10;              id=&quot;category&quot;&#10;              name=&quot;category&quot;&#10;              value={formData.category}&#10;              onChange={handleChange}&#10;            &gt;&#10;              &lt;option value=&quot;&quot;&gt;Select a category (optional)&lt;/option&gt;&#10;              &lt;option value=&quot;Electronics&quot;&gt;Electronics&lt;/option&gt;&#10;              &lt;option value=&quot;Collectibles&quot;&gt;Collectibles&lt;/option&gt;&#10;              &lt;option value=&quot;Art&quot;&gt;Art&lt;/option&gt;&#10;              &lt;option value=&quot;Books&quot;&gt;Books&lt;/option&gt;&#10;              &lt;option value=&quot;Clothing&quot;&gt;Clothing&lt;/option&gt;&#10;              &lt;option value=&quot;Home &amp; Garden&quot;&gt;Home &amp; Garden&lt;/option&gt;&#10;              &lt;option value=&quot;Sports&quot;&gt;Sports&lt;/option&gt;&#10;              &lt;option value=&quot;Automotive&quot;&gt;Automotive&lt;/option&gt;&#10;              &lt;option value=&quot;Other&quot;&gt;Other&lt;/option&gt;&#10;            &lt;/select&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;form-group&quot;&gt;&#10;            &lt;label htmlFor=&quot;imageUrl&quot;&gt;Image URL&lt;/label&gt;&#10;            &lt;input&#10;              type=&quot;url&quot;&#10;              id=&quot;imageUrl&quot;&#10;              name=&quot;imageUrl&quot;&#10;              value={formData.imageUrl}&#10;              onChange={handleChange}&#10;              placeholder=&quot;https://example.com/image.jpg (optional)&quot;&#10;            /&gt;&#10;            &lt;small&gt;Provide a URL to an image of your item&lt;/small&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;form-actions&quot;&gt;&#10;            &lt;button &#10;              type=&quot;button&quot; &#10;              onClick={() =&gt; navigate(-1)} &#10;              className=&quot;btn btn-secondary&quot;&#10;            &gt;&#10;              Cancel&#10;            &lt;/button&gt;&#10;            &lt;button &#10;              type=&quot;submit&quot; &#10;              className=&quot;btn btn-primary&quot;&#10;              disabled={loading}&#10;            &gt;&#10;              {loading ? 'Creating Auction...' : 'Create Auction'}&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/form&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default CreateAuction;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/Home.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/Home.css" />
              <option name="updatedContent" value=".home {&#10;  max-width: 1200px;&#10;  margin: 0 auto;&#10;}&#10;&#10;.hero-section {&#10;  text-align: center;&#10;  padding: 60px 20px;&#10;  background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);&#10;  border-radius: 16px;&#10;  margin-bottom: 40px;&#10;  color: white;&#10;}&#10;&#10;.hero-section h1 {&#10;  font-size: 3rem;&#10;  font-weight: 700;&#10;  margin-bottom: 16px;&#10;  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.hero-section p {&#10;  font-size: 1.2rem;&#10;  opacity: 0.9;&#10;  max-width: 600px;&#10;  margin: 0 auto;&#10;}&#10;&#10;.auctions-section {&#10;  margin-bottom: 40px;&#10;}&#10;&#10;.auctions-section h2 {&#10;  font-size: 2rem;&#10;  margin-bottom: 30px;&#10;  color: #333;&#10;  text-align: center;&#10;}&#10;&#10;.no-auctions {&#10;  text-align: center;&#10;  padding: 60px 20px;&#10;  background: white;&#10;  border-radius: 12px;&#10;  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.no-auctions p {&#10;  font-size: 1.1rem;&#10;  color: #6c757d;&#10;  margin-bottom: 20px;&#10;}&#10;&#10;.auctions-grid {&#10;  display: grid;&#10;  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));&#10;  gap: 24px;&#10;  padding: 0 20px;&#10;}&#10;&#10;.auction-card {&#10;  background: white;&#10;  border-radius: 16px;&#10;  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);&#10;  overflow: hidden;&#10;  transition: all 0.3s ease;&#10;  border: 1px solid #e9ecef;&#10;}&#10;&#10;.auction-card:hover {&#10;  transform: translateY(-8px);&#10;  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);&#10;}&#10;&#10;.auction-image {&#10;  width: 100%;&#10;  height: 200px;&#10;  overflow: hidden;&#10;  background: #f8f9fa;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;}&#10;&#10;.auction-image img {&#10;  width: 100%;&#10;  height: 100%;&#10;  object-fit: cover;&#10;}&#10;&#10;.placeholder-image {&#10;  font-size: 3rem;&#10;  color: #6c757d;&#10;}&#10;&#10;.auction-content {&#10;  padding: 24px;&#10;}&#10;&#10;.auction-content h3 {&#10;  font-size: 1.3rem;&#10;  font-weight: 600;&#10;  margin-bottom: 12px;&#10;  color: #333;&#10;  line-height: 1.4;&#10;}&#10;&#10;.auction-description {&#10;  color: #6c757d;&#10;  font-size: 0.9rem;&#10;  line-height: 1.5;&#10;  margin-bottom: 20px;&#10;  display: -webkit-box;&#10;  -webkit-line-clamp: 2;&#10;  -webkit-box-orient: vertical;&#10;  overflow: hidden;&#10;}&#10;&#10;.auction-details {&#10;  margin-bottom: 20px;&#10;}&#10;&#10;.current-bid,&#10;.bid-count,&#10;.time-remaining {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  margin-bottom: 8px;&#10;  padding: 8px 0;&#10;  border-bottom: 1px solid #f1f3f4;&#10;}&#10;&#10;.current-bid:last-child,&#10;.bid-count:last-child,&#10;.time-remaining:last-child {&#10;  border-bottom: none;&#10;}&#10;&#10;.label {&#10;  font-size: 0.85rem;&#10;  color: #6c757d;&#10;  font-weight: 500;&#10;}&#10;&#10;.price {&#10;  font-size: 1.1rem;&#10;  font-weight: 700;&#10;  color: #28a745;&#10;}&#10;&#10;.count {&#10;  font-weight: 600;&#10;  color: #007bff;&#10;}&#10;&#10;.time {&#10;  font-weight: 600;&#10;  color: #fd7e14;&#10;}&#10;&#10;/* Responsive Design */&#10;@media (max-width: 768px) {&#10;  .hero-section {&#10;    padding: 40px 16px;&#10;  }&#10;&#10;  .hero-section h1 {&#10;    font-size: 2.2rem;&#10;  }&#10;&#10;  .hero-section p {&#10;    font-size: 1rem;&#10;  }&#10;&#10;  .auctions-grid {&#10;    grid-template-columns: 1fr;&#10;    padding: 0;&#10;  }&#10;&#10;  .auction-content {&#10;    padding: 20px;&#10;  }&#10;&#10;  .auction-content h3 {&#10;    font-size: 1.2rem;&#10;  }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;  .hero-section h1 {&#10;    font-size: 1.8rem;&#10;  }&#10;&#10;  .auction-card {&#10;    border-radius: 12px;&#10;  }&#10;&#10;  .auction-content {&#10;    padding: 16px;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/Home.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/Home.tsx" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { Link } from 'react-router-dom';&#10;import { Auction } from '../types';&#10;import { auctionService } from '../services/api';&#10;import './Home.css';&#10;&#10;const Home: React.FC = () =&gt; {&#10;  const [auctions, setAuctions] = useState&lt;Auction[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;  useEffect(() =&gt; {&#10;    const fetchAuctions = async () =&gt; {&#10;      try {&#10;        setLoading(true);&#10;        const activeAuctions = await auctionService.getActiveAuctions();&#10;        setAuctions(activeAuctions);&#10;      } catch (err) {&#10;        setError('Failed to fetch auctions');&#10;        console.error('Error fetching auctions:', err);&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    };&#10;&#10;    fetchAuctions();&#10;  }, []);&#10;&#10;  const formatPrice = (price: number) =&gt; {&#10;    return new Intl.NumberFormat('en-US', {&#10;      style: 'currency',&#10;      currency: 'USD'&#10;    }).format(price);&#10;  };&#10;&#10;  const formatTimeRemaining = (endTime: string) =&gt; {&#10;    const now = new Date();&#10;    const end = new Date(endTime);&#10;    const diff = end.getTime() - now.getTime();&#10;    &#10;    if (diff &lt;= 0) return 'Ended';&#10;    &#10;    const days = Math.floor(diff / (1000 * 60 * 60 * 24));&#10;    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));&#10;    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));&#10;    &#10;    if (days &gt; 0) return `${days}d ${hours}h`;&#10;    if (hours &gt; 0) return `${hours}h ${minutes}m`;&#10;    return `${minutes}m`;&#10;  };&#10;&#10;  if (loading) {&#10;    return &lt;div className=&quot;loading&quot;&gt;Loading auctions...&lt;/div&gt;;&#10;  }&#10;&#10;  if (error) {&#10;    return &lt;div className=&quot;error&quot;&gt;{error}&lt;/div&gt;;&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;home&quot;&gt;&#10;      &lt;div className=&quot;hero-section&quot;&gt;&#10;        &lt;h1&gt;Welcome to Auction House&lt;/h1&gt;&#10;        &lt;p&gt;Discover amazing items and place your bids on live auctions&lt;/p&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;auctions-section&quot;&gt;&#10;        &lt;h2&gt;Active Auctions&lt;/h2&gt;&#10;        {auctions.length === 0 ? (&#10;          &lt;div className=&quot;no-auctions&quot;&gt;&#10;            &lt;p&gt;No active auctions at the moment.&lt;/p&gt;&#10;            &lt;Link to=&quot;/create-auction&quot; className=&quot;btn btn-primary&quot;&gt;&#10;              Create First Auction&#10;            &lt;/Link&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;div className=&quot;auctions-grid&quot;&gt;&#10;            {auctions.map((auction) =&gt; (&#10;              &lt;div key={auction.id} className=&quot;auction-card&quot;&gt;&#10;                &lt;div className=&quot;auction-image&quot;&gt;&#10;                  {auction.imageUrl ? (&#10;                    &lt;img src={auction.imageUrl} alt={auction.title} /&gt;&#10;                  ) : (&#10;                    &lt;div className=&quot;placeholder-image&quot;&gt;&lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;auction-content&quot;&gt;&#10;                  &lt;h3&gt;{auction.title}&lt;/h3&gt;&#10;                  &lt;p className=&quot;auction-description&quot;&gt;{auction.description}&lt;/p&gt;&#10;                  &lt;div className=&quot;auction-details&quot;&gt;&#10;                    &lt;div className=&quot;current-bid&quot;&gt;&#10;                      &lt;span className=&quot;label&quot;&gt;Current Bid:&lt;/span&gt;&#10;                      &lt;span className=&quot;price&quot;&gt;{formatPrice(auction.currentBid)}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;bid-count&quot;&gt;&#10;                      &lt;span className=&quot;label&quot;&gt;Bids:&lt;/span&gt;&#10;                      &lt;span className=&quot;count&quot;&gt;{auction.bidCount}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;time-remaining&quot;&gt;&#10;                      &lt;span className=&quot;label&quot;&gt;Time Left:&lt;/span&gt;&#10;                      &lt;span className=&quot;time&quot;&gt;{formatTimeRemaining(auction.endTime)}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;Link to={`/auction/${auction.id}`} className=&quot;btn btn-primary&quot;&gt;&#10;                    View Auction&#10;                  &lt;/Link&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Home;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/Login.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/Login.css" />
              <option name="updatedContent" value=".login-page {&#10;  min-height: calc(100vh - 140px);&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  padding: 20px;&#10;}&#10;&#10;.login-container {&#10;  width: 100%;&#10;  max-width: 400px;&#10;}&#10;&#10;.login-form {&#10;  background: white;&#10;  padding: 40px;&#10;  border-radius: 16px;&#10;  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);&#10;  border: 1px solid #e9ecef;&#10;}&#10;&#10;.login-form h2 {&#10;  text-align: center;&#10;  margin-bottom: 32px;&#10;  color: #333;&#10;  font-size: 1.8rem;&#10;  font-weight: 600;&#10;}&#10;&#10;.login-form .form-group {&#10;  margin-bottom: 24px;&#10;}&#10;&#10;.login-form .form-group:last-of-type {&#10;  margin-bottom: 32px;&#10;}&#10;&#10;.login-form input {&#10;  height: 48px;&#10;  font-size: 16px;&#10;  border: 2px solid #e9ecef;&#10;  border-radius: 8px;&#10;  transition: all 0.3s ease;&#10;}&#10;&#10;.login-form input:focus {&#10;  border-color: #007bff;&#10;  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);&#10;}&#10;&#10;.login-form .btn {&#10;  height: 48px;&#10;  font-size: 16px;&#10;  font-weight: 600;&#10;  border-radius: 8px;&#10;  margin-bottom: 24px;&#10;}&#10;&#10;.login-footer {&#10;  text-align: center;&#10;  padding-top: 20px;&#10;  border-top: 1px solid #e9ecef;&#10;}&#10;&#10;.login-footer p {&#10;  color: #6c757d;&#10;  margin: 0;&#10;}&#10;&#10;.login-footer a {&#10;  color: #007bff;&#10;  text-decoration: none;&#10;  font-weight: 500;&#10;}&#10;&#10;.login-footer a:hover {&#10;  text-decoration: underline;&#10;}&#10;&#10;/* Loading and Error States */&#10;.login-form .btn:disabled {&#10;  background-color: #6c757d;&#10;  cursor: not-allowed;&#10;  transform: none;&#10;}&#10;&#10;.error-message {&#10;  background-color: #f8d7da;&#10;  color: #721c24;&#10;  padding: 12px 16px;&#10;  border-radius: 8px;&#10;  border: 1px solid #f5c6cb;&#10;  margin-bottom: 24px;&#10;  font-size: 14px;&#10;}&#10;&#10;/* Responsive Design */&#10;@media (max-width: 480px) {&#10;  .login-form {&#10;    padding: 24px;&#10;    margin: 16px;&#10;  }&#10;&#10;  .login-form h2 {&#10;    font-size: 1.5rem;&#10;    margin-bottom: 24px;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/Login.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/Login.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { Link, useNavigate } from 'react-router-dom';&#10;import { useAuth } from '../contexts/AuthContext';&#10;import './Login.css';&#10;&#10;const Login: React.FC = () =&gt; {&#10;  const [formData, setFormData] = useState({&#10;    username: '',&#10;    password: ''&#10;  });&#10;  const [loading, setLoading] = useState(false);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;  const { login } = useAuth();&#10;  const navigate = useNavigate();&#10;&#10;  const handleChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;    setFormData({&#10;      ...formData,&#10;      [e.target.name]: e.target.value&#10;    });&#10;  };&#10;&#10;  const handleSubmit = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    setLoading(true);&#10;    setError(null);&#10;&#10;    try {&#10;      await login(formData);&#10;      navigate('/');&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Login failed. Please try again.');&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;login-page&quot;&gt;&#10;      &lt;div className=&quot;login-container&quot;&gt;&#10;        &lt;div className=&quot;login-form&quot;&gt;&#10;          &lt;h2&gt;Login to Auction House&lt;/h2&gt;&#10;          &#10;          {error &amp;&amp; &lt;div className=&quot;error-message&quot;&gt;{error}&lt;/div&gt;}&#10;          &#10;          &lt;form onSubmit={handleSubmit}&gt;&#10;            &lt;div className=&quot;form-group&quot;&gt;&#10;              &lt;label htmlFor=&quot;username&quot;&gt;Username&lt;/label&gt;&#10;              &lt;input&#10;                type=&quot;text&quot;&#10;                id=&quot;username&quot;&#10;                name=&quot;username&quot;&#10;                value={formData.username}&#10;                onChange={handleChange}&#10;                required&#10;                placeholder=&quot;Enter your username&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;form-group&quot;&gt;&#10;              &lt;label htmlFor=&quot;password&quot;&gt;Password&lt;/label&gt;&#10;              &lt;input&#10;                type=&quot;password&quot;&#10;                id=&quot;password&quot;&#10;                name=&quot;password&quot;&#10;                value={formData.password}&#10;                onChange={handleChange}&#10;                required&#10;                placeholder=&quot;Enter your password&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;button &#10;              type=&quot;submit&quot; &#10;              className=&quot;btn btn-primary btn-full-width&quot;&#10;              disabled={loading}&#10;            &gt;&#10;              {loading ? 'Logging in...' : 'Login'}&#10;            &lt;/button&gt;&#10;          &lt;/form&gt;&#10;&#10;          &lt;div className=&quot;login-footer&quot;&gt;&#10;            &lt;p&gt;&#10;              Don't have an account? &lt;Link to=&quot;/register&quot;&gt;Register here&lt;/Link&gt;&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Login;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/MyAuctions.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/MyAuctions.css" />
              <option name="updatedContent" value=".my-auctions {&#10;  max-width: 1200px;&#10;  margin: 0 auto;&#10;  padding: 20px;&#10;}&#10;&#10;.my-auctions-header {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  margin-bottom: 32px;&#10;  padding: 0 4px;&#10;}&#10;&#10;.my-auctions-header h2 {&#10;  font-size: 2rem;&#10;  font-weight: 700;&#10;  color: #333;&#10;}&#10;&#10;.filter-tabs {&#10;  display: flex;&#10;  gap: 8px;&#10;  margin-bottom: 32px;&#10;  background: white;&#10;  padding: 8px;&#10;  border-radius: 12px;&#10;  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);&#10;  overflow-x: auto;&#10;}&#10;&#10;.filter-tabs button {&#10;  padding: 12px 20px;&#10;  border: none;&#10;  background: transparent;&#10;  color: #6c757d;&#10;  border-radius: 8px;&#10;  cursor: pointer;&#10;  transition: all 0.3s ease;&#10;  font-weight: 500;&#10;  white-space: nowrap;&#10;  min-width: 80px;&#10;}&#10;&#10;.filter-tabs button:hover {&#10;  background: #f8f9fa;&#10;  color: #333;&#10;}&#10;&#10;.filter-tabs button.active {&#10;  background: #007bff;&#10;  color: white;&#10;  box-shadow: 0 2px 8px rgba(0, 123, 255, 0.3);&#10;}&#10;&#10;.no-auctions {&#10;  text-align: center;&#10;  padding: 80px 20px;&#10;}&#10;&#10;.empty-state {&#10;  background: white;&#10;  border-radius: 16px;&#10;  padding: 60px 40px;&#10;  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);&#10;  max-width: 500px;&#10;  margin: 0 auto;&#10;}&#10;&#10;.empty-state h3 {&#10;  font-size: 1.5rem;&#10;  color: #6c757d;&#10;  margin-bottom: 16px;&#10;}&#10;&#10;.empty-state p {&#10;  color: #6c757d;&#10;  font-size: 1rem;&#10;  line-height: 1.6;&#10;}&#10;&#10;.empty-state a {&#10;  color: #007bff;&#10;  text-decoration: none;&#10;  font-weight: 500;&#10;}&#10;&#10;.empty-state a:hover {&#10;  text-decoration: underline;&#10;}&#10;&#10;.auctions-list {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 24px;&#10;}&#10;&#10;.auction-item {&#10;  background: white;&#10;  border-radius: 16px;&#10;  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);&#10;  padding: 24px;&#10;  display: grid;&#10;  grid-template-columns: 150px 1fr auto;&#10;  gap: 24px;&#10;  align-items: center;&#10;  transition: all 0.3s ease;&#10;}&#10;&#10;.auction-item:hover {&#10;  transform: translateY(-4px);&#10;  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);&#10;}&#10;&#10;.auction-item .auction-image {&#10;  width: 150px;&#10;  height: 100px;&#10;  border-radius: 8px;&#10;  overflow: hidden;&#10;  background: #f8f9fa;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;}&#10;&#10;.auction-item .auction-image img {&#10;  width: 100%;&#10;  height: 100%;&#10;  object-fit: cover;&#10;}&#10;&#10;.auction-item .placeholder-image {&#10;  font-size: 2rem;&#10;  color: #6c757d;&#10;}&#10;&#10;.auction-details {&#10;  flex: 1;&#10;}&#10;&#10;.auction-details h3 {&#10;  font-size: 1.3rem;&#10;  font-weight: 600;&#10;  margin-bottom: 8px;&#10;  color: #333;&#10;}&#10;&#10;.auction-details .description {&#10;  color: #6c757d;&#10;  font-size: 0.9rem;&#10;  line-height: 1.5;&#10;  margin-bottom: 16px;&#10;  display: -webkit-box;&#10;  -webkit-line-clamp: 2;&#10;  -webkit-box-orient: vertical;&#10;  overflow: hidden;&#10;}&#10;&#10;.auction-stats {&#10;  display: grid;&#10;  grid-template-columns: repeat(3, 1fr);&#10;  gap: 16px;&#10;  margin-bottom: 12px;&#10;}&#10;&#10;.stat {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 4px;&#10;}&#10;&#10;.stat .label {&#10;  font-size: 0.8rem;&#10;  color: #6c757d;&#10;  font-weight: 500;&#10;}&#10;&#10;.stat .value {&#10;  font-size: 1rem;&#10;  font-weight: 600;&#10;  color: #333;&#10;}&#10;&#10;.auction-timing {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  gap: 16px;&#10;}&#10;&#10;.time-remaining {&#10;  font-size: 0.9rem;&#10;  color: #fd7e14;&#10;  font-weight: 500;&#10;}&#10;&#10;.status {&#10;  padding: 4px 12px;&#10;  border-radius: 20px;&#10;  font-size: 0.8rem;&#10;  font-weight: 600;&#10;  text-transform: uppercase;&#10;}&#10;&#10;.status-active {&#10;  background: #d4edda;&#10;  color: #155724;&#10;}&#10;&#10;.status-ended {&#10;  background: #f8d7da;&#10;  color: #721c24;&#10;}&#10;&#10;.auction-actions {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 8px;&#10;  min-width: 120px;&#10;}&#10;&#10;.auction-actions .btn {&#10;  padding: 8px 16px;&#10;  font-size: 0.85rem;&#10;  min-width: auto;&#10;}&#10;&#10;/* Error Message */&#10;.error-message {&#10;  background-color: #f8d7da;&#10;  color: #721c24;&#10;  padding: 16px 20px;&#10;  border-radius: 8px;&#10;  border: 1px solid #f5c6cb;&#10;  margin-bottom: 24px;&#10;  text-align: center;&#10;}&#10;&#10;/* Responsive Design */&#10;@media (max-width: 768px) {&#10;  .my-auctions {&#10;    padding: 16px;&#10;  }&#10;&#10;  .my-auctions-header {&#10;    flex-direction: column;&#10;    gap: 16px;&#10;    align-items: stretch;&#10;  }&#10;&#10;  .my-auctions-header h2 {&#10;    font-size: 1.6rem;&#10;    text-align: center;&#10;  }&#10;&#10;  .filter-tabs {&#10;    justify-content: center;&#10;  }&#10;&#10;  .auction-item {&#10;    grid-template-columns: 1fr;&#10;    gap: 16px;&#10;    text-align: center;&#10;  }&#10;&#10;  .auction-item .auction-image {&#10;    width: 100%;&#10;    height: 200px;&#10;    margin: 0 auto;&#10;  }&#10;&#10;  .auction-stats {&#10;    grid-template-columns: 1fr;&#10;    gap: 8px;&#10;    text-align: left;&#10;  }&#10;&#10;  .auction-timing {&#10;    flex-direction: column;&#10;    gap: 8px;&#10;  }&#10;&#10;  .auction-actions {&#10;    flex-direction: row;&#10;    justify-content: center;&#10;  }&#10;&#10;  .empty-state {&#10;    padding: 40px 24px;&#10;  }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;  .filter-tabs {&#10;    flex-wrap: wrap;&#10;  }&#10;&#10;  .filter-tabs button {&#10;    flex: 1;&#10;    min-width: 70px;&#10;    padding: 10px 12px;&#10;    font-size: 0.8rem;&#10;  }&#10;&#10;  .auction-item {&#10;    padding: 20px;&#10;  }&#10;&#10;  .auction-details h3 {&#10;    font-size: 1.1rem;&#10;  }&#10;&#10;  .auction-actions {&#10;    flex-direction: column;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/MyAuctions.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/MyAuctions.tsx" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { Link } from 'react-router-dom';&#10;import { Auction } from '../types';&#10;import { auctionService } from '../services/api';&#10;import { useAuth } from '../contexts/AuthContext';&#10;import './MyAuctions.css';&#10;&#10;const MyAuctions: React.FC = () =&gt; {&#10;  const { user } = useAuth();&#10;  const [auctions, setAuctions] = useState&lt;Auction[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [filter, setFilter] = useState&lt;'all' | 'active' | 'ended'&gt;('all');&#10;&#10;  useEffect(() =&gt; {&#10;    const fetchMyAuctions = async () =&gt; {&#10;      if (!user) return;&#10;&#10;      try {&#10;        setLoading(true);&#10;        // Note: You'll need to implement this endpoint in your backend&#10;        const allAuctions = await auctionService.getAllAuctions();&#10;        const myAuctions = allAuctions.filter(auction =&gt; auction.sellerId === user.id);&#10;        setAuctions(myAuctions);&#10;      } catch (err) {&#10;        setError('Failed to fetch your auctions');&#10;        console.error('Error fetching auctions:', err);&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    };&#10;&#10;    fetchMyAuctions();&#10;  }, [user]);&#10;&#10;  const filteredAuctions = auctions.filter(auction =&gt; {&#10;    if (filter === 'all') return true;&#10;    if (filter === 'active') return auction.status === 'ACTIVE' &amp;&amp; new Date() &lt; new Date(auction.endTime);&#10;    if (filter === 'ended') return auction.status === 'ENDED' || new Date() &gt;= new Date(auction.endTime);&#10;    return true;&#10;  });&#10;&#10;  const formatPrice = (price: number) =&gt; {&#10;    return new Intl.NumberFormat('en-US', {&#10;      style: 'currency',&#10;      currency: 'USD'&#10;    }).format(price);&#10;  };&#10;&#10;  const formatTimeRemaining = (endTime: string) =&gt; {&#10;    const now = new Date();&#10;    const end = new Date(endTime);&#10;    const diff = end.getTime() - now.getTime();&#10;    &#10;    if (diff &lt;= 0) return 'Ended';&#10;    &#10;    const days = Math.floor(diff / (1000 * 60 * 60 * 24));&#10;    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));&#10;    &#10;    if (days &gt; 0) return `${days}d ${hours}h remaining`;&#10;    if (hours &gt; 0) return `${hours}h remaining`;&#10;    return 'Less than 1h remaining';&#10;  };&#10;&#10;  const getAuctionStatus = (auction: Auction) =&gt; {&#10;    if (new Date() &gt;= new Date(auction.endTime)) return 'ended';&#10;    return auction.status.toLowerCase();&#10;  };&#10;&#10;  if (loading) {&#10;    return &lt;div className=&quot;loading&quot;&gt;Loading your auctions...&lt;/div&gt;;&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;my-auctions&quot;&gt;&#10;      &lt;div className=&quot;my-auctions-header&quot;&gt;&#10;        &lt;h2&gt;My Auctions&lt;/h2&gt;&#10;        &lt;Link to=&quot;/create-auction&quot; className=&quot;btn btn-primary&quot;&gt;&#10;          Create New Auction&#10;        &lt;/Link&gt;&#10;      &lt;/div&gt;&#10;&#10;      {error &amp;&amp; &lt;div className=&quot;error-message&quot;&gt;{error}&lt;/div&gt;}&#10;&#10;      &lt;div className=&quot;filter-tabs&quot;&gt;&#10;        &lt;button &#10;          className={filter === 'all' ? 'active' : ''}&#10;          onClick={() =&gt; setFilter('all')}&#10;        &gt;&#10;          All ({auctions.length})&#10;        &lt;/button&gt;&#10;        &lt;button &#10;          className={filter === 'active' ? 'active' : ''}&#10;          onClick={() =&gt; setFilter('active')}&#10;        &gt;&#10;          Active ({auctions.filter(a =&gt; a.status === 'ACTIVE' &amp;&amp; new Date() &lt; new Date(a.endTime)).length})&#10;        &lt;/button&gt;&#10;        &lt;button &#10;          className={filter === 'ended' ? 'active' : ''}&#10;          onClick={() =&gt; setFilter('ended')}&#10;        &gt;&#10;          Ended ({auctions.filter(a =&gt; a.status === 'ENDED' || new Date() &gt;= new Date(a.endTime)).length})&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;&#10;      {filteredAuctions.length === 0 ? (&#10;        &lt;div className=&quot;no-auctions&quot;&gt;&#10;          &lt;div className=&quot;empty-state&quot;&gt;&#10;            &lt;h3&gt;No auctions found&lt;/h3&gt;&#10;            {filter === 'all' ? (&#10;              &lt;p&gt;You haven't created any auctions yet. &lt;Link to=&quot;/create-auction&quot;&gt;Create your first auction&lt;/Link&gt; to get started!&lt;/p&gt;&#10;            ) : (&#10;              &lt;p&gt;No {filter} auctions found.&lt;/p&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      ) : (&#10;        &lt;div className=&quot;auctions-list&quot;&gt;&#10;          {filteredAuctions.map((auction) =&gt; (&#10;            &lt;div key={auction.id} className=&quot;auction-item&quot;&gt;&#10;              &lt;div className=&quot;auction-image&quot;&gt;&#10;                {auction.imageUrl ? (&#10;                  &lt;img src={auction.imageUrl} alt={auction.title} /&gt;&#10;                ) : (&#10;                  &lt;div className=&quot;placeholder-image&quot;&gt;&lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;              &#10;              &lt;div className=&quot;auction-details&quot;&gt;&#10;                &lt;h3&gt;{auction.title}&lt;/h3&gt;&#10;                &lt;p className=&quot;description&quot;&gt;{auction.description}&lt;/p&gt;&#10;                &#10;                &lt;div className=&quot;auction-stats&quot;&gt;&#10;                  &lt;div className=&quot;stat&quot;&gt;&#10;                    &lt;span className=&quot;label&quot;&gt;Current Bid:&lt;/span&gt;&#10;                    &lt;span className=&quot;value&quot;&gt;{formatPrice(auction.currentBid)}&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;stat&quot;&gt;&#10;                    &lt;span className=&quot;label&quot;&gt;Starting Bid:&lt;/span&gt;&#10;                    &lt;span className=&quot;value&quot;&gt;{formatPrice(auction.startingBid)}&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;stat&quot;&gt;&#10;                    &lt;span className=&quot;label&quot;&gt;Total Bids:&lt;/span&gt;&#10;                    &lt;span className=&quot;value&quot;&gt;{auction.bidCount}&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;auction-timing&quot;&gt;&#10;                  &lt;span className=&quot;time-remaining&quot;&gt;&#10;                    {formatTimeRemaining(auction.endTime)}&#10;                  &lt;/span&gt;&#10;                  &lt;span className={`status status-${getAuctionStatus(auction)}`}&gt;&#10;                    {getAuctionStatus(auction).toUpperCase()}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;auction-actions&quot;&gt;&#10;                &lt;Link &#10;                  to={`/auction/${auction.id}`} &#10;                  className=&quot;btn btn-primary&quot;&#10;                &gt;&#10;                  View Details&#10;                &lt;/Link&gt;&#10;                {getAuctionStatus(auction) === 'active' &amp;&amp; (&#10;                  &lt;button &#10;                    className=&quot;btn btn-secondary&quot;&#10;                    onClick={() =&gt; {&#10;                      // TODO: Implement edit functionality&#10;                      alert('Edit functionality coming soon!');&#10;                    }}&#10;                  &gt;&#10;                    Edit&#10;                  &lt;/button&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default MyAuctions;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/MyBids.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/MyBids.css" />
              <option name="updatedContent" value=".my-bids {&#10;  max-width: 1200px;&#10;  margin: 0 auto;&#10;  padding: 20px;&#10;}&#10;&#10;.my-bids-header {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  margin-bottom: 32px;&#10;  padding: 0 4px;&#10;}&#10;&#10;.my-bids-header h2 {&#10;  font-size: 2rem;&#10;  font-weight: 700;&#10;  color: #333;&#10;}&#10;&#10;.filter-tabs {&#10;  display: flex;&#10;  gap: 8px;&#10;  margin-bottom: 32px;&#10;  background: white;&#10;  padding: 8px;&#10;  border-radius: 12px;&#10;  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);&#10;  overflow-x: auto;&#10;}&#10;&#10;.filter-tabs button {&#10;  padding: 12px 20px;&#10;  border: none;&#10;  background: transparent;&#10;  color: #6c757d;&#10;  border-radius: 8px;&#10;  cursor: pointer;&#10;  transition: all 0.3s ease;&#10;  font-weight: 500;&#10;  white-space: nowrap;&#10;  min-width: 80px;&#10;}&#10;&#10;.filter-tabs button:hover {&#10;  background: #f8f9fa;&#10;  color: #333;&#10;}&#10;&#10;.filter-tabs button.active {&#10;  background: #007bff;&#10;  color: white;&#10;  box-shadow: 0 2px 8px rgba(0, 123, 255, 0.3);&#10;}&#10;&#10;.no-bids {&#10;  text-align: center;&#10;  padding: 80px 20px;&#10;}&#10;&#10;.empty-state {&#10;  background: white;&#10;  border-radius: 16px;&#10;  padding: 60px 40px;&#10;  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);&#10;  max-width: 500px;&#10;  margin: 0 auto;&#10;}&#10;&#10;.empty-state h3 {&#10;  font-size: 1.5rem;&#10;  color: #6c757d;&#10;  margin-bottom: 16px;&#10;}&#10;&#10;.empty-state p {&#10;  color: #6c757d;&#10;  font-size: 1rem;&#10;  line-height: 1.6;&#10;}&#10;&#10;.empty-state a {&#10;  color: #007bff;&#10;  text-decoration: none;&#10;  font-weight: 500;&#10;}&#10;&#10;.empty-state a:hover {&#10;  text-decoration: underline;&#10;}&#10;&#10;.bids-list {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 24px;&#10;}&#10;&#10;.bid-item {&#10;  background: white;&#10;  border-radius: 16px;&#10;  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);&#10;  padding: 24px;&#10;  display: grid;&#10;  grid-template-columns: 150px 1fr auto;&#10;  gap: 24px;&#10;  align-items: center;&#10;  transition: all 0.3s ease;&#10;  border-left: 4px solid transparent;&#10;}&#10;&#10;.bid-item:hover {&#10;  transform: translateY(-4px);&#10;  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);&#10;}&#10;&#10;.bid-item .auction-image {&#10;  width: 150px;&#10;  height: 100px;&#10;  border-radius: 8px;&#10;  overflow: hidden;&#10;  background: #f8f9fa;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;}&#10;&#10;.bid-item .auction-image img {&#10;  width: 100%;&#10;  height: 100%;&#10;  object-fit: cover;&#10;}&#10;&#10;.bid-item .placeholder-image {&#10;  font-size: 2rem;&#10;  color: #6c757d;&#10;}&#10;&#10;.bid-details {&#10;  flex: 1;&#10;}&#10;&#10;.bid-details h3 {&#10;  font-size: 1.3rem;&#10;  font-weight: 600;&#10;  margin-bottom: 8px;&#10;  color: #333;&#10;}&#10;&#10;.auction-description {&#10;  color: #6c757d;&#10;  font-size: 0.9rem;&#10;  line-height: 1.5;&#10;  margin-bottom: 16px;&#10;  display: -webkit-box;&#10;  -webkit-line-clamp: 2;&#10;  -webkit-box-orient: vertical;&#10;  overflow: hidden;&#10;}&#10;&#10;.bid-info {&#10;  margin-bottom: 16px;&#10;}&#10;&#10;.bid-amounts {&#10;  display: grid;&#10;  grid-template-columns: 1fr 1fr;&#10;  gap: 16px;&#10;  margin-bottom: 12px;&#10;}&#10;&#10;.amount-item {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 4px;&#10;}&#10;&#10;.amount-item .label {&#10;  font-size: 0.8rem;&#10;  color: #6c757d;&#10;  font-weight: 500;&#10;}&#10;&#10;.amount-item .value {&#10;  font-size: 1.1rem;&#10;  font-weight: 700;&#10;}&#10;&#10;.bid-timing {&#10;  display: grid;&#10;  grid-template-columns: 1fr 1fr;&#10;  gap: 16px;&#10;}&#10;&#10;.time-item {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 4px;&#10;}&#10;&#10;.time-item .label {&#10;  font-size: 0.8rem;&#10;  color: #6c757d;&#10;  font-weight: 500;&#10;}&#10;&#10;.time-item .value {&#10;  font-size: 0.9rem;&#10;  font-weight: 500;&#10;  color: #333;&#10;}&#10;&#10;.bid-status {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 8px;&#10;  align-items: flex-start;&#10;}&#10;&#10;.status {&#10;  padding: 6px 12px;&#10;  border-radius: 20px;&#10;  font-size: 0.8rem;&#10;  font-weight: 600;&#10;  text-transform: uppercase;&#10;  letter-spacing: 0.5px;&#10;}&#10;&#10;.status-winning {&#10;  background: #d4edda;&#10;  color: #155724;&#10;  border: 1px solid #c3e6cb;&#10;}&#10;&#10;.status-outbid {&#10;  background: #fff3cd;&#10;  color: #856404;&#10;  border: 1px solid #ffeaa7;&#10;}&#10;&#10;.status-won {&#10;  background: #d1ecf1;&#10;  color: #0c5460;&#10;  border: 1px solid #bee5eb;&#10;}&#10;&#10;.status-lost {&#10;  background: #f8d7da;&#10;  color: #721c24;&#10;  border: 1px solid #f5c6cb;&#10;}&#10;&#10;.status-hint {&#10;  font-size: 0.75rem;&#10;  color: #856404;&#10;  font-style: italic;&#10;}&#10;&#10;.bid-actions {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 8px;&#10;  min-width: 120px;&#10;}&#10;&#10;.bid-actions .btn {&#10;  padding: 8px 16px;&#10;  font-size: 0.85rem;&#10;  min-width: auto;&#10;}&#10;&#10;/* Special styling for winning bids */&#10;.bid-item:has(.status-winning) {&#10;  border-left-color: #28a745;&#10;}&#10;&#10;.bid-item:has(.status-won) {&#10;  border-left-color: #17a2b8;&#10;}&#10;&#10;.bid-item:has(.status-outbid) {&#10;  border-left-color: #ffc107;&#10;}&#10;&#10;.bid-item:has(.status-lost) {&#10;  border-left-color: #dc3545;&#10;}&#10;&#10;/* Error Message */&#10;.error-message {&#10;  background-color: #f8d7da;&#10;  color: #721c24;&#10;  padding: 16px 20px;&#10;  border-radius: 8px;&#10;  border: 1px solid #f5c6cb;&#10;  margin-bottom: 24px;&#10;  text-align: center;&#10;}&#10;&#10;/* Responsive Design */&#10;@media (max-width: 768px) {&#10;  .my-bids {&#10;    padding: 16px;&#10;  }&#10;&#10;  .my-bids-header {&#10;    flex-direction: column;&#10;    gap: 16px;&#10;    align-items: stretch;&#10;  }&#10;&#10;  .my-bids-header h2 {&#10;    font-size: 1.6rem;&#10;    text-align: center;&#10;  }&#10;&#10;  .filter-tabs {&#10;    justify-content: center;&#10;  }&#10;&#10;  .bid-item {&#10;    grid-template-columns: 1fr;&#10;    gap: 16px;&#10;    text-align: center;&#10;  }&#10;&#10;  .bid-item .auction-image {&#10;    width: 100%;&#10;    height: 200px;&#10;    margin: 0 auto;&#10;  }&#10;&#10;  .bid-amounts,&#10;  .bid-timing {&#10;    grid-template-columns: 1fr;&#10;    gap: 8px;&#10;    text-align: left;&#10;  }&#10;&#10;  .bid-status {&#10;    align-items: center;&#10;  }&#10;&#10;  .bid-actions {&#10;    flex-direction: row;&#10;    justify-content: center;&#10;  }&#10;&#10;  .empty-state {&#10;    padding: 40px 24px;&#10;  }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;  .filter-tabs {&#10;    flex-wrap: wrap;&#10;  }&#10;&#10;  .filter-tabs button {&#10;    flex: 1;&#10;    min-width: 60px;&#10;    padding: 8px 10px;&#10;    font-size: 0.75rem;&#10;  }&#10;&#10;  .bid-item {&#10;    padding: 20px;&#10;  }&#10;&#10;  .bid-details h3 {&#10;    font-size: 1.1rem;&#10;  }&#10;&#10;  .bid-actions {&#10;    flex-direction: column;&#10;  }&#10;&#10;  .bid-actions .btn {&#10;    font-size: 0.8rem;&#10;    padding: 6px 12px;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/MyBids.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/MyBids.tsx" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { Link } from 'react-router-dom';&#10;import { Bid, Auction } from '../types';&#10;import { bidService, auctionService } from '../services/api';&#10;import { useAuth } from '../contexts/AuthContext';&#10;import './MyBids.css';&#10;&#10;interface BidWithAuction extends Bid {&#10;  auction: Auction;&#10;  isWinning: boolean;&#10;}&#10;&#10;const MyBids: React.FC = () =&gt; {&#10;  const { user } = useAuth();&#10;  const [bids, setBids] = useState&lt;BidWithAuction[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [filter, setFilter] = useState&lt;'all' | 'winning' | 'outbid' | 'won' | 'lost'&gt;('all');&#10;&#10;  useEffect(() =&gt; {&#10;    const fetchMyBids = async () =&gt; {&#10;      if (!user) return;&#10;&#10;      try {&#10;        setLoading(true);&#10;        const userBids = await bidService.getUserBids(user.id);&#10;        &#10;        // Fetch auction details for each bid&#10;        const bidsWithAuctions = await Promise.all(&#10;          userBids.map(async (bid) =&gt; {&#10;            try {&#10;              const auction = await auctionService.getAuctionById(bid.auctionId);&#10;              const isWinning = auction.currentBid === bid.amount &amp;&amp; new Date() &lt; new Date(auction.endTime);&#10;              return { ...bid, auction, isWinning };&#10;            } catch (err) {&#10;              console.error(`Failed to fetch auction ${bid.auctionId}:`, err);&#10;              return null;&#10;            }&#10;          })&#10;        );&#10;&#10;        // Filter out failed auction fetches and sort by timestamp&#10;        const validBids = bidsWithAuctions&#10;          .filter(bid =&gt; bid !== null) as BidWithAuction[];&#10;        &#10;        validBids.sort((a, b) =&gt; new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());&#10;        setBids(validBids);&#10;      } catch (err) {&#10;        setError('Failed to fetch your bids');&#10;        console.error('Error fetching bids:', err);&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    };&#10;&#10;    fetchMyBids();&#10;  }, [user]);&#10;&#10;  const filteredBids = bids.filter(bid =&gt; {&#10;    const auctionEnded = new Date() &gt;= new Date(bid.auction.endTime);&#10;    &#10;    switch (filter) {&#10;      case 'all':&#10;        return true;&#10;      case 'winning':&#10;        return bid.isWinning &amp;&amp; !auctionEnded;&#10;      case 'outbid':&#10;        return !bid.isWinning &amp;&amp; !auctionEnded;&#10;      case 'won':&#10;        return bid.isWinning &amp;&amp; auctionEnded;&#10;      case 'lost':&#10;        return !bid.isWinning &amp;&amp; auctionEnded;&#10;      default:&#10;        return true;&#10;    }&#10;  });&#10;&#10;  const formatPrice = (price: number) =&gt; {&#10;    return new Intl.NumberFormat('en-US', {&#10;      style: 'currency',&#10;      currency: 'USD'&#10;    }).format(price);&#10;  };&#10;&#10;  const formatDateTime = (dateTime: string) =&gt; {&#10;    return new Date(dateTime).toLocaleString();&#10;  };&#10;&#10;  const getBidStatus = (bid: BidWithAuction) =&gt; {&#10;    const auctionEnded = new Date() &gt;= new Date(bid.auction.endTime);&#10;    &#10;    if (auctionEnded) {&#10;      return bid.isWinning ? 'won' : 'lost';&#10;    } else {&#10;      return bid.isWinning ? 'winning' : 'outbid';&#10;    }&#10;  };&#10;&#10;  const getStatusText = (status: string) =&gt; {&#10;    switch (status) {&#10;      case 'winning': return 'Currently Winning';&#10;      case 'outbid': return 'Outbid';&#10;      case 'won': return 'Won';&#10;      case 'lost': return 'Lost';&#10;      default: return '';&#10;    }&#10;  };&#10;&#10;  const getCounts = () =&gt; {&#10;    const auctionStatuses = bids.map(bid =&gt; getBidStatus(bid));&#10;    return {&#10;      all: bids.length,&#10;      winning: auctionStatuses.filter(s =&gt; s === 'winning').length,&#10;      outbid: auctionStatuses.filter(s =&gt; s === 'outbid').length,&#10;      won: auctionStatuses.filter(s =&gt; s === 'won').length,&#10;      lost: auctionStatuses.filter(s =&gt; s === 'lost').length&#10;    };&#10;  };&#10;&#10;  if (loading) {&#10;    return &lt;div className=&quot;loading&quot;&gt;Loading your bids...&lt;/div&gt;;&#10;  }&#10;&#10;  const counts = getCounts();&#10;&#10;  return (&#10;    &lt;div className=&quot;my-bids&quot;&gt;&#10;      &lt;div className=&quot;my-bids-header&quot;&gt;&#10;        &lt;h2&gt;My Bids&lt;/h2&gt;&#10;        &lt;Link to=&quot;/&quot; className=&quot;btn btn-primary&quot;&gt;&#10;          Browse Auctions&#10;        &lt;/Link&gt;&#10;      &lt;/div&gt;&#10;&#10;      {error &amp;&amp; &lt;div className=&quot;error-message&quot;&gt;{error}&lt;/div&gt;}&#10;&#10;      &lt;div className=&quot;filter-tabs&quot;&gt;&#10;        &lt;button &#10;          className={filter === 'all' ? 'active' : ''}&#10;          onClick={() =&gt; setFilter('all')}&#10;        &gt;&#10;          All ({counts.all})&#10;        &lt;/button&gt;&#10;        &lt;button &#10;          className={filter === 'winning' ? 'active' : ''}&#10;          onClick={() =&gt; setFilter('winning')}&#10;        &gt;&#10;          Winning ({counts.winning})&#10;        &lt;/button&gt;&#10;        &lt;button &#10;          className={filter === 'outbid' ? 'active' : ''}&#10;          onClick={() =&gt; setFilter('outbid')}&#10;        &gt;&#10;          Outbid ({counts.outbid})&#10;        &lt;/button&gt;&#10;        &lt;button &#10;          className={filter === 'won' ? 'active' : ''}&#10;          onClick={() =&gt; setFilter('won')}&#10;        &gt;&#10;          Won ({counts.won})&#10;        &lt;/button&gt;&#10;        &lt;button &#10;          className={filter === 'lost' ? 'active' : ''}&#10;          onClick={() =&gt; setFilter('lost')}&#10;        &gt;&#10;          Lost ({counts.lost})&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;&#10;      {filteredBids.length === 0 ? (&#10;        &lt;div className=&quot;no-bids&quot;&gt;&#10;          &lt;div className=&quot;empty-state&quot;&gt;&#10;            &lt;h3&gt;No bids found&lt;/h3&gt;&#10;            {filter === 'all' ? (&#10;              &lt;p&gt;You haven't placed any bids yet. &lt;Link to=&quot;/&quot;&gt;Browse auctions&lt;/Link&gt; to start bidding!&lt;/p&gt;&#10;            ) : (&#10;              &lt;p&gt;No {filter} bids found.&lt;/p&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      ) : (&#10;        &lt;div className=&quot;bids-list&quot;&gt;&#10;          {filteredBids.map((bid) =&gt; (&#10;            &lt;div key={bid.id} className=&quot;bid-item&quot;&gt;&#10;              &lt;div className=&quot;auction-image&quot;&gt;&#10;                {bid.auction.imageUrl ? (&#10;                  &lt;img src={bid.auction.imageUrl} alt={bid.auction.title} /&gt;&#10;                ) : (&#10;                  &lt;div className=&quot;placeholder-image&quot;&gt;&lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;              &#10;              &lt;div className=&quot;bid-details&quot;&gt;&#10;                &lt;h3&gt;{bid.auction.title}&lt;/h3&gt;&#10;                &lt;p className=&quot;auction-description&quot;&gt;{bid.auction.description}&lt;/p&gt;&#10;                &#10;                &lt;div className=&quot;bid-info&quot;&gt;&#10;                  &lt;div className=&quot;bid-amounts&quot;&gt;&#10;                    &lt;div className=&quot;amount-item&quot;&gt;&#10;                      &lt;span className=&quot;label&quot;&gt;Your Bid:&lt;/span&gt;&#10;                      &lt;span className=&quot;value&quot;&gt;{formatPrice(bid.amount)}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;amount-item&quot;&gt;&#10;                      &lt;span className=&quot;label&quot;&gt;Current Bid:&lt;/span&gt;&#10;                      &lt;span className=&quot;value&quot;&gt;{formatPrice(bid.auction.currentBid)}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &#10;                  &lt;div className=&quot;bid-timing&quot;&gt;&#10;                    &lt;div className=&quot;time-item&quot;&gt;&#10;                      &lt;span className=&quot;label&quot;&gt;Bid Placed:&lt;/span&gt;&#10;                      &lt;span className=&quot;value&quot;&gt;{formatDateTime(bid.timestamp)}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;time-item&quot;&gt;&#10;                      &lt;span className=&quot;label&quot;&gt;Auction Ends:&lt;/span&gt;&#10;                      &lt;span className=&quot;value&quot;&gt;{formatDateTime(bid.auction.endTime)}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;bid-status&quot;&gt;&#10;                  &lt;span className={`status status-${getBidStatus(bid)}`}&gt;&#10;                    {getStatusText(getBidStatus(bid))}&#10;                  &lt;/span&gt;&#10;                  {getBidStatus(bid) === 'outbid' &amp;&amp; (&#10;                    &lt;span className=&quot;status-hint&quot;&gt;&#10;                      Place a higher bid to win!&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;bid-actions&quot;&gt;&#10;                &lt;Link &#10;                  to={`/auction/${bid.auction.id}`} &#10;                  className=&quot;btn btn-primary&quot;&#10;                &gt;&#10;                  View Auction&#10;                &lt;/Link&gt;&#10;                {getBidStatus(bid) === 'outbid' &amp;&amp; (&#10;                  &lt;Link &#10;                    to={`/auction/${bid.auction.id}`} &#10;                    className=&quot;btn btn-secondary&quot;&#10;                  &gt;&#10;                    Bid Again&#10;                  &lt;/Link&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default MyBids;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/Profile.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/Profile.css" />
              <option name="updatedContent" value=".profile {&#10;  max-width: 800px;&#10;  margin: 0 auto;&#10;  padding: 20px;&#10;}&#10;&#10;.profile-container {&#10;  background: white;&#10;  border-radius: 16px;&#10;  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);&#10;  overflow: hidden;&#10;}&#10;&#10;.profile-header {&#10;  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);&#10;  color: white;&#10;  padding: 40px;&#10;  position: relative;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 24px;&#10;}&#10;&#10;.profile-avatar {&#10;  width: 80px;&#10;  height: 80px;&#10;  background: rgba(255, 255, 255, 0.2);&#10;  border-radius: 50%;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  font-size: 2rem;&#10;  backdrop-filter: blur(10px);&#10;}&#10;&#10;.profile-info {&#10;  flex: 1;&#10;}&#10;&#10;.profile-info h2 {&#10;  font-size: 2rem;&#10;  font-weight: 700;&#10;  margin-bottom: 8px;&#10;}&#10;&#10;.username {&#10;  font-size: 1.1rem;&#10;  opacity: 0.9;&#10;  margin-bottom: 4px;&#10;}&#10;&#10;.join-date {&#10;  font-size: 0.9rem;&#10;  opacity: 0.8;&#10;  margin-bottom: 12px;&#10;}&#10;&#10;.status-badge {&#10;  display: inline-block;&#10;  padding: 4px 12px;&#10;  border-radius: 20px;&#10;  font-size: 0.8rem;&#10;  font-weight: 600;&#10;  text-transform: uppercase;&#10;}&#10;&#10;.status-badge.active {&#10;  background: rgba(40, 167, 69, 0.2);&#10;  color: #28a745;&#10;  border: 1px solid rgba(40, 167, 69, 0.3);&#10;}&#10;&#10;.status-badge.inactive {&#10;  background: rgba(220, 53, 69, 0.2);&#10;  color: #dc3545;&#10;  border: 1px solid rgba(220, 53, 69, 0.3);&#10;}&#10;&#10;.edit-btn {&#10;  position: absolute;&#10;  top: 24px;&#10;  right: 24px;&#10;  background: rgba(255, 255, 255, 0.2);&#10;  border: 1px solid rgba(255, 255, 255, 0.3);&#10;  color: white;&#10;  backdrop-filter: blur(10px);&#10;}&#10;&#10;.edit-btn:hover {&#10;  background: rgba(255, 255, 255, 0.3);&#10;  color: white;&#10;}&#10;&#10;.profile-content {&#10;  padding: 40px;&#10;}&#10;&#10;.profile-form .form-group {&#10;  margin-bottom: 24px;&#10;}&#10;&#10;.profile-form input,&#10;.profile-form textarea {&#10;  padding: 14px 16px;&#10;  border: 2px solid #e9ecef;&#10;  border-radius: 8px;&#10;  font-size: 16px;&#10;  transition: all 0.3s ease;&#10;}&#10;&#10;.profile-form textarea {&#10;  resize: vertical;&#10;  min-height: 80px;&#10;  font-family: inherit;&#10;}&#10;&#10;.profile-form input:focus,&#10;.profile-form textarea:focus {&#10;  outline: none;&#10;  border-color: #007bff;&#10;  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);&#10;}&#10;&#10;.profile-form .form-actions {&#10;  display: flex;&#10;  gap: 16px;&#10;  justify-content: flex-end;&#10;  margin-top: 32px;&#10;  padding-top: 24px;&#10;  border-top: 1px solid #e9ecef;&#10;}&#10;&#10;.profile-details {&#10;  display: grid;&#10;  gap: 24px;&#10;}&#10;&#10;.detail-group {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 8px;&#10;  padding: 20px;&#10;  background: #f8f9fa;&#10;  border-radius: 8px;&#10;  border-left: 4px solid #007bff;&#10;}&#10;&#10;.detail-group label {&#10;  font-size: 0.85rem;&#10;  font-weight: 600;&#10;  color: #6c757d;&#10;  text-transform: uppercase;&#10;  letter-spacing: 0.5px;&#10;}&#10;&#10;.detail-group p {&#10;  font-size: 1rem;&#10;  color: #333;&#10;  margin: 0;&#10;  font-weight: 500;&#10;}&#10;&#10;.role-badge {&#10;  display: inline-block;&#10;  padding: 4px 12px;&#10;  background: #e3f2fd;&#10;  color: #1976d2;&#10;  border-radius: 20px;&#10;  font-size: 0.8rem;&#10;  font-weight: 600;&#10;  text-transform: uppercase;&#10;}&#10;&#10;.profile-actions {&#10;  padding: 24px 40px;&#10;  border-top: 1px solid #e9ecef;&#10;  background: #f8f9fa;&#10;  display: flex;&#10;  justify-content: center;&#10;}&#10;&#10;.logout-btn {&#10;  background: #dc3545;&#10;  color: white;&#10;  border: none;&#10;  padding: 12px 32px;&#10;  border-radius: 8px;&#10;  font-weight: 600;&#10;  cursor: pointer;&#10;  transition: all 0.3s ease;&#10;}&#10;&#10;.logout-btn:hover {&#10;  background: #c82333;&#10;  transform: translateY(-2px);&#10;  box-shadow: 0 4px 12px rgba(220, 53, 69, 0.3);&#10;}&#10;&#10;/* Success and Error Messages */&#10;.success-message {&#10;  background-color: #d4edda;&#10;  color: #155724;&#10;  padding: 12px 16px;&#10;  border-radius: 8px;&#10;  border: 1px solid #c3e6cb;&#10;  margin-bottom: 24px;&#10;  font-size: 14px;&#10;}&#10;&#10;.error-message {&#10;  background-color: #f8d7da;&#10;  color: #721c24;&#10;  padding: 12px 16px;&#10;  border-radius: 8px;&#10;  border: 1px solid #f5c6cb;&#10;  margin-bottom: 24px;&#10;  font-size: 14px;&#10;}&#10;&#10;/* Loading State */&#10;.profile-form .btn:disabled {&#10;  opacity: 0.6;&#10;  cursor: not-allowed;&#10;  transform: none;&#10;}&#10;&#10;/* Responsive Design */&#10;@media (max-width: 768px) {&#10;  .profile {&#10;    padding: 16px;&#10;  }&#10;&#10;  .profile-header {&#10;    flex-direction: column;&#10;    text-align: center;&#10;    padding: 24px;&#10;  }&#10;&#10;  .profile-info h2 {&#10;    font-size: 1.6rem;&#10;  }&#10;&#10;  .edit-btn {&#10;    position: static;&#10;    margin-top: 16px;&#10;  }&#10;&#10;  .profile-content {&#10;    padding: 24px;&#10;  }&#10;&#10;  .profile-form .form-actions {&#10;    flex-direction: column;&#10;  }&#10;&#10;  .profile-form .btn {&#10;    width: 100%;&#10;  }&#10;&#10;  .profile-actions {&#10;    padding: 20px 24px;&#10;  }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;  .profile-header {&#10;    padding: 20px;&#10;  }&#10;&#10;  .profile-avatar {&#10;    width: 60px;&#10;    height: 60px;&#10;    font-size: 1.5rem;&#10;  }&#10;&#10;  .profile-info h2 {&#10;    font-size: 1.4rem;&#10;  }&#10;&#10;  .profile-content {&#10;    padding: 20px;&#10;  }&#10;&#10;  .detail-group {&#10;    padding: 16px;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/Profile.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/Profile.tsx" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { useAuth } from '../contexts/AuthContext';&#10;import { userService } from '../services/api';&#10;import { User } from '../types';&#10;import './Profile.css';&#10;&#10;const Profile: React.FC = () =&gt; {&#10;  const { user, logout } = useAuth();&#10;  const [isEditing, setIsEditing] = useState(false);&#10;  const [loading, setLoading] = useState(false);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [success, setSuccess] = useState&lt;string | null&gt;(null);&#10;  &#10;  const [formData, setFormData] = useState({&#10;    fullName: user?.fullName || '',&#10;    email: user?.email || '',&#10;    address: user?.address || '',&#10;    phoneNumber: user?.phoneNumber || ''&#10;  });&#10;&#10;  const handleChange = (e: React.ChangeEvent&lt;HTMLInputElement | HTMLTextAreaElement&gt;) =&gt; {&#10;    setFormData({&#10;      ...formData,&#10;      [e.target.name]: e.target.value&#10;    });&#10;  };&#10;&#10;  const handleSubmit = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!user) return;&#10;&#10;    setLoading(true);&#10;    setError(null);&#10;&#10;    try {&#10;      await userService.updateProfile(user.id, formData);&#10;      setSuccess('Profile updated successfully!');&#10;      setIsEditing(false);&#10;      &#10;      // Update user in localStorage&#10;      const updatedUser = { ...user, ...formData };&#10;      localStorage.setItem('user', JSON.stringify(updatedUser));&#10;      &#10;      setTimeout(() =&gt; setSuccess(null), 3000);&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to update profile');&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const handleCancel = () =&gt; {&#10;    setFormData({&#10;      fullName: user?.fullName || '',&#10;      email: user?.email || '',&#10;      address: user?.address || '',&#10;      phoneNumber: user?.phoneNumber || ''&#10;    });&#10;    setIsEditing(false);&#10;    setError(null);&#10;  };&#10;&#10;  const formatDate = (dateString: string) =&gt; {&#10;    return new Date(dateString).toLocaleDateString();&#10;  };&#10;&#10;  if (!user) {&#10;    return &lt;div className=&quot;loading&quot;&gt;Loading profile...&lt;/div&gt;;&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;profile&quot;&gt;&#10;      &lt;div className=&quot;profile-container&quot;&gt;&#10;        &lt;div className=&quot;profile-header&quot;&gt;&#10;          &lt;div className=&quot;profile-avatar&quot;&gt;&#10;            &#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;profile-info&quot;&gt;&#10;            &lt;h2&gt;{user.fullName}&lt;/h2&gt;&#10;            &lt;p className=&quot;username&quot;&gt;@{user.username}&lt;/p&gt;&#10;            &lt;p className=&quot;join-date&quot;&gt;Member since {formatDate(user.createdAt)}&lt;/p&gt;&#10;            &lt;span className={`status-badge ${user.isActive ? 'active' : 'inactive'}`}&gt;&#10;              {user.isActive ? 'Active' : 'Inactive'}&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;          {!isEditing &amp;&amp; (&#10;            &lt;button &#10;              onClick={() =&gt; setIsEditing(true)}&#10;              className=&quot;btn btn-primary edit-btn&quot;&#10;            &gt;&#10;              Edit Profile&#10;            &lt;/button&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {success &amp;&amp; &lt;div className=&quot;success-message&quot;&gt;{success}&lt;/div&gt;}&#10;        {error &amp;&amp; &lt;div className=&quot;error-message&quot;&gt;{error}&lt;/div&gt;}&#10;&#10;        &lt;div className=&quot;profile-content&quot;&gt;&#10;          {isEditing ? (&#10;            &lt;form onSubmit={handleSubmit} className=&quot;profile-form&quot;&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label htmlFor=&quot;fullName&quot;&gt;Full Name&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  id=&quot;fullName&quot;&#10;                  name=&quot;fullName&quot;&#10;                  value={formData.fullName}&#10;                  onChange={handleChange}&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label htmlFor=&quot;email&quot;&gt;Email&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;email&quot;&#10;                  id=&quot;email&quot;&#10;                  name=&quot;email&quot;&#10;                  value={formData.email}&#10;                  onChange={handleChange}&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label htmlFor=&quot;phoneNumber&quot;&gt;Phone Number&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;tel&quot;&#10;                  id=&quot;phoneNumber&quot;&#10;                  name=&quot;phoneNumber&quot;&#10;                  value={formData.phoneNumber}&#10;                  onChange={handleChange}&#10;                  placeholder=&quot;Optional&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label htmlFor=&quot;address&quot;&gt;Address&lt;/label&gt;&#10;                &lt;textarea&#10;                  id=&quot;address&quot;&#10;                  name=&quot;address&quot;&#10;                  value={formData.address}&#10;                  onChange={handleChange}&#10;                  rows={3}&#10;                  placeholder=&quot;Optional&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;form-actions&quot;&gt;&#10;                &lt;button &#10;                  type=&quot;button&quot; &#10;                  onClick={handleCancel}&#10;                  className=&quot;btn btn-secondary&quot;&#10;                  disabled={loading}&#10;                &gt;&#10;                  Cancel&#10;                &lt;/button&gt;&#10;                &lt;button &#10;                  type=&quot;submit&quot; &#10;                  className=&quot;btn btn-primary&quot;&#10;                  disabled={loading}&#10;                &gt;&#10;                  {loading ? 'Saving...' : 'Save Changes'}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;          ) : (&#10;            &lt;div className=&quot;profile-details&quot;&gt;&#10;              &lt;div className=&quot;detail-group&quot;&gt;&#10;                &lt;label&gt;Username&lt;/label&gt;&#10;                &lt;p&gt;{user.username}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;detail-group&quot;&gt;&#10;                &lt;label&gt;Full Name&lt;/label&gt;&#10;                &lt;p&gt;{user.fullName}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;detail-group&quot;&gt;&#10;                &lt;label&gt;Email&lt;/label&gt;&#10;                &lt;p&gt;{user.email}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;detail-group&quot;&gt;&#10;                &lt;label&gt;Phone Number&lt;/label&gt;&#10;                &lt;p&gt;{user.phoneNumber || 'Not provided'}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;detail-group&quot;&gt;&#10;                &lt;label&gt;Address&lt;/label&gt;&#10;                &lt;p&gt;{user.address || 'Not provided'}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;detail-group&quot;&gt;&#10;                &lt;label&gt;Role&lt;/label&gt;&#10;                &lt;p className=&quot;role-badge&quot;&gt;{user.role}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;detail-group&quot;&gt;&#10;                &lt;label&gt;Last Updated&lt;/label&gt;&#10;                &lt;p&gt;{formatDate(user.updatedAt)}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;profile-actions&quot;&gt;&#10;          &lt;button &#10;            onClick={logout}&#10;            className=&quot;btn btn-danger logout-btn&quot;&#10;          &gt;&#10;            Logout&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Profile;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/Register.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/Register.css" />
              <option name="updatedContent" value=".register-page {&#10;  min-height: calc(100vh - 140px);&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  padding: 20px;&#10;}&#10;&#10;.register-container {&#10;  width: 100%;&#10;  max-width: 600px;&#10;}&#10;&#10;.register-form {&#10;  background: white;&#10;  padding: 40px;&#10;  border-radius: 16px;&#10;  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);&#10;  border: 1px solid #e9ecef;&#10;}&#10;&#10;.register-form h2 {&#10;  text-align: center;&#10;  margin-bottom: 32px;&#10;  color: #333;&#10;  font-size: 1.8rem;&#10;  font-weight: 600;&#10;}&#10;&#10;.register-form .form-group {&#10;  margin-bottom: 20px;&#10;}&#10;&#10;.register-form .form-row {&#10;  display: grid;&#10;  grid-template-columns: 1fr 1fr;&#10;  gap: 16px;&#10;  margin-bottom: 20px;&#10;}&#10;&#10;.register-form .form-row .form-group {&#10;  margin-bottom: 0;&#10;}&#10;&#10;.register-form input,&#10;.register-form textarea {&#10;  height: 48px;&#10;  font-size: 16px;&#10;  border: 2px solid #e9ecef;&#10;  border-radius: 8px;&#10;  transition: all 0.3s ease;&#10;}&#10;&#10;.register-form textarea {&#10;  height: 80px;&#10;  resize: vertical;&#10;  font-family: inherit;&#10;}&#10;&#10;.register-form input:focus,&#10;.register-form textarea:focus {&#10;  border-color: #007bff;&#10;  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);&#10;}&#10;&#10;.register-form .btn {&#10;  height: 48px;&#10;  font-size: 16px;&#10;  font-weight: 600;&#10;  border-radius: 8px;&#10;  margin-bottom: 24px;&#10;}&#10;&#10;.register-footer {&#10;  text-align: center;&#10;  padding-top: 20px;&#10;  border-top: 1px solid #e9ecef;&#10;}&#10;&#10;.register-footer p {&#10;  color: #6c757d;&#10;  margin: 0;&#10;}&#10;&#10;.register-footer a {&#10;  color: #007bff;&#10;  text-decoration: none;&#10;  font-weight: 500;&#10;}&#10;&#10;.register-footer a:hover {&#10;  text-decoration: underline;&#10;}&#10;&#10;/* Success State */&#10;.success-message {&#10;  text-align: center;&#10;  background: white;&#10;  padding: 60px 40px;&#10;  border-radius: 16px;&#10;  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.success-message h2 {&#10;  color: #28a745;&#10;  margin-bottom: 16px;&#10;  font-size: 1.8rem;&#10;}&#10;&#10;.success-message p {&#10;  color: #6c757d;&#10;  font-size: 1.1rem;&#10;}&#10;&#10;/* Error State */&#10;.error-message {&#10;  background-color: #f8d7da;&#10;  color: #721c24;&#10;  padding: 12px 16px;&#10;  border-radius: 8px;&#10;  border: 1px solid #f5c6cb;&#10;  margin-bottom: 24px;&#10;  font-size: 14px;&#10;}&#10;&#10;/* Loading State */&#10;.register-form .btn:disabled {&#10;  background-color: #6c757d;&#10;  cursor: not-allowed;&#10;  transform: none;&#10;}&#10;&#10;/* Required Field Indicator */&#10;.register-form label::after {&#10;  content: &quot; *&quot;;&#10;  color: #dc3545;&#10;}&#10;&#10;.register-form label[for=&quot;address&quot;]::after,&#10;.register-form label[for=&quot;phoneNumber&quot;]::after {&#10;  content: &quot;&quot;;&#10;}&#10;&#10;/* Responsive Design */&#10;@media (max-width: 768px) {&#10;  .register-form .form-row {&#10;    grid-template-columns: 1fr;&#10;    gap: 0;&#10;  }&#10;&#10;  .register-form .form-row .form-group {&#10;    margin-bottom: 20px;&#10;  }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;  .register-form {&#10;    padding: 24px;&#10;    margin: 16px;&#10;  }&#10;&#10;  .register-form h2 {&#10;    font-size: 1.5rem;&#10;    margin-bottom: 24px;&#10;  }&#10;&#10;  .success-message {&#10;    padding: 40px 24px;&#10;    margin: 16px;&#10;  }&#10;&#10;  .success-message h2 {&#10;    font-size: 1.5rem;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/Register.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/Register.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { Link, useNavigate } from 'react-router-dom';&#10;import { useAuth } from '../contexts/AuthContext';&#10;import './Register.css';&#10;&#10;const Register: React.FC = () =&gt; {&#10;  const [formData, setFormData] = useState({&#10;    username: '',&#10;    email: '',&#10;    password: '',&#10;    confirmPassword: '',&#10;    fullName: '',&#10;    address: '',&#10;    phoneNumber: ''&#10;  });&#10;  const [loading, setLoading] = useState(false);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [success, setSuccess] = useState(false);&#10;&#10;  const { register } = useAuth();&#10;  const navigate = useNavigate();&#10;&#10;  const handleChange = (e: React.ChangeEvent&lt;HTMLInputElement | HTMLTextAreaElement&gt;) =&gt; {&#10;    setFormData({&#10;      ...formData,&#10;      [e.target.name]: e.target.value&#10;    });&#10;  };&#10;&#10;  const handleSubmit = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    setLoading(true);&#10;    setError(null);&#10;&#10;    // Validate password confirmation&#10;    if (formData.password !== formData.confirmPassword) {&#10;      setError('Passwords do not match');&#10;      setLoading(false);&#10;      return;&#10;    }&#10;&#10;    try {&#10;      const registerData = {&#10;        username: formData.username,&#10;        email: formData.email,&#10;        password: formData.password,&#10;        fullName: formData.fullName,&#10;        address: formData.address || undefined,&#10;        phoneNumber: formData.phoneNumber || undefined&#10;      };&#10;&#10;      await register(registerData);&#10;      setSuccess(true);&#10;      setTimeout(() =&gt; {&#10;        navigate('/login');&#10;      }, 2000);&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Registration failed. Please try again.');&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  if (success) {&#10;    return (&#10;      &lt;div className=&quot;register-page&quot;&gt;&#10;        &lt;div className=&quot;register-container&quot;&gt;&#10;          &lt;div className=&quot;success-message&quot;&gt;&#10;            &lt;h2&gt;Registration Successful!&lt;/h2&gt;&#10;            &lt;p&gt;Your account has been created. Redirecting to login...&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;register-page&quot;&gt;&#10;      &lt;div className=&quot;register-container&quot;&gt;&#10;        &lt;div className=&quot;register-form&quot;&gt;&#10;          &lt;h2&gt;Join Auction House&lt;/h2&gt;&#10;          &#10;          {error &amp;&amp; &lt;div className=&quot;error-message&quot;&gt;{error}&lt;/div&gt;}&#10;          &#10;          &lt;form onSubmit={handleSubmit}&gt;&#10;            &lt;div className=&quot;form-row&quot;&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label htmlFor=&quot;username&quot;&gt;Username *&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  id=&quot;username&quot;&#10;                  name=&quot;username&quot;&#10;                  value={formData.username}&#10;                  onChange={handleChange}&#10;                  required&#10;                  placeholder=&quot;Choose a username&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label htmlFor=&quot;email&quot;&gt;Email *&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;email&quot;&#10;                  id=&quot;email&quot;&#10;                  name=&quot;email&quot;&#10;                  value={formData.email}&#10;                  onChange={handleChange}&#10;                  required&#10;                  placeholder=&quot;your@email.com&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;form-group&quot;&gt;&#10;              &lt;label htmlFor=&quot;fullName&quot;&gt;Full Name *&lt;/label&gt;&#10;              &lt;input&#10;                type=&quot;text&quot;&#10;                id=&quot;fullName&quot;&#10;                name=&quot;fullName&quot;&#10;                value={formData.fullName}&#10;                onChange={handleChange}&#10;                required&#10;                placeholder=&quot;Your full name&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;form-row&quot;&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label htmlFor=&quot;password&quot;&gt;Password *&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;password&quot;&#10;                  id=&quot;password&quot;&#10;                  name=&quot;password&quot;&#10;                  value={formData.password}&#10;                  onChange={handleChange}&#10;                  required&#10;                  placeholder=&quot;Create a password&quot;&#10;                  minLength={6}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label htmlFor=&quot;confirmPassword&quot;&gt;Confirm Password *&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;password&quot;&#10;                  id=&quot;confirmPassword&quot;&#10;                  name=&quot;confirmPassword&quot;&#10;                  value={formData.confirmPassword}&#10;                  onChange={handleChange}&#10;                  required&#10;                  placeholder=&quot;Confirm your password&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;form-group&quot;&gt;&#10;              &lt;label htmlFor=&quot;address&quot;&gt;Address&lt;/label&gt;&#10;              &lt;textarea&#10;                id=&quot;address&quot;&#10;                name=&quot;address&quot;&#10;                value={formData.address}&#10;                onChange={handleChange}&#10;                placeholder=&quot;Your address (optional)&quot;&#10;                rows={3}&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;form-group&quot;&gt;&#10;              &lt;label htmlFor=&quot;phoneNumber&quot;&gt;Phone Number&lt;/label&gt;&#10;              &lt;input&#10;                type=&quot;tel&quot;&#10;                id=&quot;phoneNumber&quot;&#10;                name=&quot;phoneNumber&quot;&#10;                value={formData.phoneNumber}&#10;                onChange={handleChange}&#10;                placeholder=&quot;Your phone number (optional)&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;button &#10;              type=&quot;submit&quot; &#10;              className=&quot;btn btn-primary btn-full-width&quot;&#10;              disabled={loading}&#10;            &gt;&#10;              {loading ? 'Creating Account...' : 'Register'}&#10;            &lt;/button&gt;&#10;          &lt;/form&gt;&#10;&#10;          &lt;div className=&quot;register-footer&quot;&gt;&#10;            &lt;p&gt;&#10;              Already have an account? &lt;Link to=&quot;/login&quot;&gt;Login here&lt;/Link&gt;&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Register;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/services/api.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/services/api.ts" />
              <option name="originalContent" value="import axios from 'axios';&#10;import { User, Auction, Bid, RegisterRequest, LoginRequest, AuthResponse } from '../types';&#10;&#10;// Configure axios instance with base URL for your API Gateway&#10;const api = axios.create({&#10;  baseURL: 'http://localhost:8080', // Update this to match your gateway port&#10;  headers: {&#10;    'Content-Type': 'application/json',&#10;  },&#10;});&#10;&#10;// Add auth token to requests if available&#10;api.interceptors.request.use((config) =&gt; {&#10;  const token = localStorage.getItem('authToken');&#10;  if (token) {&#10;    config.headers.Authorization = `Bearer ${token}`;&#10;  }&#10;  return config;&#10;});&#10;&#10;&#10;export const authService = {&#10;  login: async (loginRequest: LoginRequest): Promise&lt;AuthResponse&gt; =&gt; {&#10;    const response = await api.post('/user-service/api/users/login', loginRequest);&#10;    return response.data;&#10;  },&#10;&#10;  register: async (registerRequest: RegisterRequest): Promise&lt;User&gt; =&gt; {&#10;    const response = await api.post('/user-service/api/users/register', registerRequest);&#10;    return response.data;&#10;  },&#10;&#10;  logout: () =&gt; {&#10;    localStorage.removeItem('authToken');&#10;    localStorage.removeItem('user');&#10;  },&#10;&#10;  getCurrentUser: (): User | null =&gt; {&#10;    const userStr = localStorage.getItem('user');&#10;    return userStr ? JSON.parse(userStr) : null;&#10;  },&#10;&#10;  isAuthenticated: (): boolean =&gt; {&#10;    return !!localStorage.getItem('authToken');&#10;  }&#10;};&#10;&#10;// User Services - Updated to match your actual backend&#10;export const userService = {&#10;  getProfile: async (userId: string): Promise&lt;User&gt; =&gt; {&#10;    const response = await api.get(`/user-service/api/users/${userId}`);&#10;    return response.data;&#10;  },&#10;&#10;  updateProfile: async (userId: string, userData: Partial&lt;User&gt;): Promise&lt;User&gt; =&gt; {&#10;    const response = await api.put(`/user-service/api/users/${userId}`, userData);&#10;    return response.data;&#10;  }&#10;};&#10;&#10;// Auction Services&#10;export const auctionService = {&#10;  getAllAuctions: async (): Promise&lt;Auction[]&gt; =&gt; {&#10;    const response = await api.get('/auction-service/api/auctions');&#10;    return response.data;&#10;  },&#10;&#10;  getActiveAuctions: async (): Promise&lt;Auction[]&gt; =&gt; {&#10;    const response = await api.get('/auction-service/api/auctions/active');&#10;    return response.data;&#10;  },&#10;&#10;  getAuctionById: async (auctionId: string): Promise&lt;Auction&gt; =&gt; {&#10;    const response = await api.get(`/auction-service/api/auctions/${auctionId}`);&#10;    return response.data;&#10;  },&#10;&#10;  createAuction: async (auctionData: Partial&lt;Auction&gt;): Promise&lt;Auction&gt; =&gt; {&#10;    const response = await api.post('/auction-service/api/auctions', auctionData);&#10;    return response.data;&#10;  },&#10;&#10;  updateAuction: async (auctionId: string, auctionData: Partial&lt;Auction&gt;): Promise&lt;Auction&gt; =&gt; {&#10;    const response = await api.put(`/auction-service/api/auctions/${auctionId}`, auctionData);&#10;    return response.data;&#10;  },&#10;&#10;  deleteAuction: async (auctionId: string): Promise&lt;void&gt; =&gt; {&#10;    await api.delete(`/auction-service/api/auctions/${auctionId}`);&#10;  }&#10;};&#10;&#10;// Bid Services&#10;export const bidService = {&#10;  placeBid: async (auctionId: string, amount: number): Promise&lt;Bid&gt; =&gt; {&#10;    const response = await api.post(`/auction-service/api/auctions/${auctionId}/bids`, {&#10;      amount&#10;    });&#10;    return response.data;&#10;  },&#10;&#10;  getBidsForAuction: async (auctionId: string): Promise&lt;Bid[]&gt; =&gt; {&#10;    const response = await api.get(`/auction-service/api/auctions/${auctionId}/bids`);&#10;    return response.data;&#10;  },&#10;&#10;  getUserBids: async (userId: string): Promise&lt;Bid[]&gt; =&gt; {&#10;    const response = await api.get(`/auction-service/api/users/${userId}/bids`);&#10;    return response.data;&#10;  }&#10;};&#10;&#10;export default api;&#10;" />
              <option name="updatedContent" value="import axios from 'axios';&#10;import { User, Auction, Bid, RegisterRequest, LoginRequest, AuthResponse } from '../types';&#10;&#10;// Configure axios instance with base URL for your API Gateway&#10;const api = axios.create({&#10;  baseURL: 'http://localhost:8080', // Update this to match your gateway port&#10;  headers: {&#10;    'Content-Type': 'application/json',&#10;  },&#10;});&#10;&#10;// Add auth token to requests if available&#10;api.interceptors.request.use((config) =&gt; {&#10;  const token = localStorage.getItem('authToken');&#10;  if (token) {&#10;    config.headers.Authorization = `Bearer ${token}`;&#10;  }&#10;  return config;&#10;});&#10;&#10;&#10;export const authService = {&#10;  login: async (loginRequest: LoginRequest): Promise&lt;AuthResponse&gt; =&gt; {&#10;    const response = await api.post('/user-service/api/users/login', loginRequest);&#10;    return response.data;&#10;  },&#10;&#10;  register: async (registerRequest: RegisterRequest): Promise&lt;User&gt; =&gt; {&#10;    const response = await api.post('/user-service/api/users/register', registerRequest);&#10;    return response.data;&#10;  },&#10;&#10;  logout: () =&gt; {&#10;    localStorage.removeItem('authToken');&#10;    localStorage.removeItem('user');&#10;  },&#10;&#10;  getCurrentUser: (): User | null =&gt; {&#10;    const userStr = localStorage.getItem('user');&#10;    return userStr ? JSON.parse(userStr) : null;&#10;  },&#10;&#10;  isAuthenticated: (): boolean =&gt; {&#10;    return !!localStorage.getItem('authToken');&#10;  }&#10;};&#10;&#10;// User Services - Updated to match your actual backend&#10;export const userService = {&#10;  getProfile: async (userId: string): Promise&lt;User&gt; =&gt; {&#10;    const response = await api.get(`/user-service/api/users/${userId}`);&#10;    return response.data;&#10;  },&#10;&#10;  updateProfile: async (userId: string, userData: Partial&lt;User&gt;): Promise&lt;User&gt; =&gt; {&#10;    const response = await api.put(`/user-service/api/users/${userId}`, userData);&#10;    return response.data;&#10;  }&#10;};&#10;&#10;// Auction Services - Updated to match your actual endpoints&#10;export const auctionService = {&#10;  getAllAuctions: async (): Promise&lt;Auction[]&gt; =&gt; {&#10;    const response = await api.get('/auction-service/api/auctions');&#10;    return response.data;&#10;  },&#10;&#10;  getActiveAuctions: async (): Promise&lt;Auction[]&gt; =&gt; {&#10;    // Your backend doesn't have a specific active auctions endpoint&#10;    // So we'll get all auctions and filter on frontend&#10;    const response = await api.get('/auction-service/api/auctions');&#10;    const allAuctions = response.data;&#10;    return allAuctions.filter((auction: Auction) =&gt; &#10;      auction.status === 'ACTIVE' &amp;&amp; new Date(auction.endTime) &gt; new Date()&#10;    );&#10;  },&#10;&#10;  getAuctionById: async (auctionId: string): Promise&lt;Auction&gt; =&gt; {&#10;    const response = await api.get(`/auction-service/api/auctions/${auctionId}`);&#10;    return response.data;&#10;  },&#10;&#10;  getAuctionsBySellerId: async (userId: string): Promise&lt;Auction[]&gt; =&gt; {&#10;    const response = await api.get(`/auction-service/api/auctions/user/${userId}`);&#10;    return response.data;&#10;  },&#10;&#10;  createAuction: async (auctionData: Partial&lt;Auction&gt;): Promise&lt;Auction&gt; =&gt; {&#10;    const response = await api.post('/auction-service/api/auctions', auctionData);&#10;    return response.data;&#10;  },&#10;&#10;  updateAuction: async (auctionId: string, auctionData: Partial&lt;Auction&gt;): Promise&lt;Auction&gt; =&gt; {&#10;    const response = await api.put(`/auction-service/api/auctions/${auctionId}`, auctionData);&#10;    return response.data;&#10;  },&#10;&#10;  deleteAuction: async (auctionId: string): Promise&lt;void&gt; =&gt; {&#10;    await api.delete(`/auction-service/api/auctions/${auctionId}`);&#10;  }&#10;};&#10;&#10;// Bid Services - Updated to match your actual endpoints  &#10;export const bidService = {&#10;  placeBid: async (auctionId: string, amount: number): Promise&lt;Bid&gt; =&gt; {&#10;    // Your backend expects BidRequestVO format&#10;    const bidRequest = {&#10;      auctionId,&#10;      amount,&#10;      // You'll need to add bidderId from current user context&#10;    };&#10;    const response = await api.post('/auction-service/api/bids', bidRequest);&#10;    return response.data;&#10;  },&#10;&#10;  getBidsForAuction: async (auctionId: string): Promise&lt;Bid[]&gt; =&gt; {&#10;    const response = await api.get(`/auction-service/api/bids/auction/${auctionId}`);&#10;    return response.data;&#10;  },&#10;&#10;  getUserBids: async (userId: string): Promise&lt;Bid[]&gt; =&gt; {&#10;    const response = await api.get(`/auction-service/api/bids/user/${userId}`);&#10;    return response.data;&#10;  }&#10;};&#10;&#10;export default api;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/types/index.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/types/index.ts" />
              <option name="updatedContent" value="// Types for the auction website&#10;export interface User {&#10;  id: string;&#10;  username: string;&#10;  email: string;&#10;  fullName: string;&#10;  address?: string;&#10;  phoneNumber?: string;&#10;  isActive: boolean;&#10;  role: 'USER' | 'ADMIN';&#10;  createdAt: string;&#10;  updatedAt: string;&#10;}&#10;&#10;export interface Auction {&#10;  id: string;&#10;  title: string;&#10;  description: string;&#10;  startingBid: number;&#10;  currentBid: number;&#10;  minBidIncrement: number;&#10;  startTime: string;&#10;  endTime: string;&#10;  status: 'ACTIVE' | 'ENDED' | 'PENDING';&#10;  sellerId: string;&#10;  sellerName: string;&#10;  imageUrl?: string;&#10;  category?: string;&#10;  bidCount: number;&#10;}&#10;&#10;export interface Bid {&#10;  id: string;&#10;  auctionId: string;&#10;  bidderId: string;&#10;  bidderName: string;&#10;  amount: number;&#10;  timestamp: string;&#10;}&#10;&#10;export interface RegisterRequest {&#10;  username: string;&#10;  email: string;&#10;  password: string;&#10;  fullName: string;&#10;  address?: string;&#10;  phoneNumber?: string;&#10;}&#10;&#10;export interface LoginRequest {&#10;  username: string;&#10;  password: string;&#10;}&#10;&#10;export interface AuthResponse {&#10;  token: string;&#10;  user: User;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/userservice/src/main/java/com/auction/userservice/controller/UserController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/userservice/src/main/java/com/auction/userservice/controller/UserController.java" />
              <option name="originalContent" value="package com.auction.userservice.controller;&#10;&#10;import com.auction.userservice.constants.UserConstants;&#10;import com.auction.userservice.dto.RegisterRequest;&#10;import com.auction.userservice.dto.UserDto;&#10;import com.auction.userservice.service.UserService;&#10;import jakarta.validation.Valid;&#10;import org.apache.logging.log4j.LogManager;&#10;import org.apache.logging.log4j.Logger;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.beans.factory.annotation.Qualifier;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/users&quot;)&#10;public class UserController {&#10;&#10;    @Autowired&#10;    @Qualifier(UserConstants.USERSERVICEIMPL)&#10;    private UserService userService;&#10;&#10;    private static final Logger logger = LogManager.getLogger(UserController.class);&#10;&#10;&#10;    //Endpoints&#10;    @GetMapping(&quot;/{userId}&quot;)&#10;    public ResponseEntity&lt;UserDto&gt; getUserProfile(@PathVariable String userId){&#10;        try{&#10;            return ResponseEntity.ok(userService.getUserProfile(userId));&#10;        }&#10;        catch (Exception e){&#10;            logger.fatal(&quot;Error in getUserProfile :&quot;+e);&#10;            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);&#10;        }&#10;&#10;    }&#10;&#10;    @PostMapping(&quot;/register&quot;)&#10;    public ResponseEntity&lt;UserDto&gt; register(@Valid  @RequestBody RegisterRequest request){&#10;        try {&#10;            return ResponseEntity.ok(userService.registerUser(request));&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in getUserProfile :&quot; + e);&#10;            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);&#10;        }&#10;    }&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.auction.userservice.controller;&#13;&#10;&#13;&#10;import com.auction.userservice.constants.UserConstants;&#13;&#10;import com.auction.userservice.dto.RegisterRequest;&#13;&#10;import com.auction.userservice.dto.UserDto;&#13;&#10;import com.auction.userservice.service.UserService;&#13;&#10;import jakarta.validation.Valid;&#13;&#10;import org.apache.logging.log4j.LogManager;&#13;&#10;import org.apache.logging.log4j.Logger;&#13;&#10;import org.springframework.beans.factory.annotation.Autowired;&#13;&#10;import org.springframework.beans.factory.annotation.Qualifier;&#13;&#10;import org.springframework.http.HttpStatus;&#13;&#10;import org.springframework.http.ResponseEntity;&#13;&#10;import org.springframework.web.bind.annotation.*;&#13;&#10;&#13;&#10;import java.util.Map;&#13;&#10;import java.util.HashMap;&#13;&#10;&#13;&#10;@RestController&#13;&#10;@RequestMapping(&quot;/api/users&quot;)&#13;&#10;public class UserController {&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    @Qualifier(UserConstants.USERSERVICEIMPL)&#13;&#10;    private UserService userService;&#13;&#10;&#13;&#10;    private static final Logger logger = LogManager.getLogger(UserController.class);&#13;&#10;&#13;&#10;&#13;&#10;    //Endpoints&#13;&#10;    @GetMapping(&quot;/{userId}&quot;)&#13;&#10;    public ResponseEntity&lt;UserDto&gt; getUserProfile(@PathVariable String userId){&#13;&#10;        try{&#13;&#10;            return ResponseEntity.ok(userService.getUserProfile(userId));&#13;&#10;        }&#13;&#10;        catch (Exception e){&#13;&#10;            logger.fatal(&quot;Error in getUserProfile :&quot;+e);&#13;&#10;            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);&#13;&#10;        }&#13;&#10;&#13;&#10;    }&#13;&#10;&#13;&#10;    @PostMapping(&quot;/register&quot;)&#13;&#10;    public ResponseEntity&lt;UserDto&gt; register(@Valid  @RequestBody RegisterRequest request){&#13;&#10;        try {&#13;&#10;            return ResponseEntity.ok(userService.registerUser(request));&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in register :&quot; + e);&#13;&#10;            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // NEW: Login endpoint for frontend integration&#13;&#10;    @PostMapping(&quot;/login&quot;)&#13;&#10;    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; login(@RequestBody Map&lt;String, String&gt; loginRequest){&#13;&#10;        try {&#13;&#10;            String username = loginRequest.get(&quot;username&quot;);&#13;&#10;            String password = loginRequest.get(&quot;password&quot;);&#13;&#10;            &#13;&#10;            // TODO: Implement actual authentication logic&#13;&#10;            // For now, this is a basic implementation&#13;&#10;            UserDto user = userService.authenticateUser(username, password);&#13;&#10;            &#13;&#10;            if (user != null) {&#13;&#10;                Map&lt;String, Object&gt; response = new HashMap&lt;&gt;();&#13;&#10;                response.put(&quot;token&quot;, &quot;dummy-jwt-token-&quot; + user.getId()); // Replace with actual JWT&#13;&#10;                response.put(&quot;user&quot;, user);&#13;&#10;                return ResponseEntity.ok(response);&#13;&#10;            } else {&#13;&#10;                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);&#13;&#10;            }&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in login :&quot; + e);&#13;&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // NEW: Update user profile endpoint&#13;&#10;    @PutMapping(&quot;/{userId}&quot;)&#13;&#10;    public ResponseEntity&lt;UserDto&gt; updateUserProfile(@PathVariable String userId, @RequestBody UserDto userDto){&#13;&#10;        try {&#13;&#10;            UserDto updatedUser = userService.updateUserProfile(userId, userDto);&#13;&#10;            return ResponseEntity.ok(updatedUser);&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in updateUserProfile :&quot; + e);&#13;&#10;            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/userservice/src/main/java/com/auction/userservice/dao/UserDAO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/userservice/src/main/java/com/auction/userservice/dao/UserDAO.java" />
              <option name="originalContent" value="package com.auction.userservice.dao;&#10;&#10;import com.auction.userservice.dto.UserDto;&#10;import com.auction.userservice.model.User;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;&#10;import java.util.Optional;&#10;&#10;public interface UserDAO {&#10;    UserDto findUserById(String userId) throws RuntimeException ;&#10;&#10;    UserDto registerUser(User user);&#10;&#10;    boolean existsByEmail(@NotBlank(message=&quot;Email is Required&quot;) @Email(message=&quot;Invalid email format&quot;) String email);&#10;}&#10;" />
              <option name="updatedContent" value="package com.auction.userservice.dao;&#13;&#10;&#13;&#10;import com.auction.userservice.dto.UserDto;&#13;&#10;import com.auction.userservice.model.User;&#13;&#10;import jakarta.validation.constraints.Email;&#13;&#10;import jakarta.validation.constraints.NotBlank;&#13;&#10;&#13;&#10;import java.util.Optional;&#13;&#10;&#13;&#10;public interface UserDAO {&#13;&#10;    UserDto findUserById(String userId) throws RuntimeException ;&#13;&#10;&#13;&#10;    UserDto registerUser(User user);&#13;&#10;&#13;&#10;    boolean existsByEmail(@NotBlank(message=&quot;Email is Required&quot;) @Email(message=&quot;Invalid email format&quot;) String email);&#13;&#10;    &#13;&#10;    // NEW: Authentication method for login&#13;&#10;    UserDto authenticateUser(String username, String password) throws RuntimeException;&#13;&#10;    &#13;&#10;    // NEW: Update user profile method&#13;&#10;    UserDto updateUserProfile(String userId, UserDto userDto) throws RuntimeException;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/userservice/src/main/java/com/auction/userservice/dao/impl/UserDAOImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/userservice/src/main/java/com/auction/userservice/dao/impl/UserDAOImpl.java" />
              <option name="originalContent" value="package com.auction.userservice.dao.impl;&#10;&#10;import com.auction.userservice.constants.UserConstants;&#10;import com.auction.userservice.dao.UserDAO;&#10;import com.auction.userservice.dto.UserDto;&#10;import com.auction.userservice.model.User;&#10;import com.auction.userservice.rowmapper.UserRowMapper;&#10;import org.apache.logging.log4j.LogManager;&#10;import org.apache.logging.log4j.Logger;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.context.annotation.PropertySource;&#10;import org.springframework.dao.EmptyResultDataAccessException;&#10;import org.springframework.jdbc.core.JdbcTemplate;&#10;import org.springframework.stereotype.Repository;&#10;&#10;@Repository(UserConstants.USERDAOIMPL)&#10;@PropertySource(&quot;classpath:postgres.properties&quot;)&#10;public class UserDAOImpl implements UserDAO {&#10;&#10;    @Autowired&#10;    private JdbcTemplate jdbcTemplate;&#10;&#10;    @Value(&quot;${FIND_USER_BY_ID}&quot;)&#10;    private String findUserById;&#10;&#10;    @Value(&quot;${REGISTER_USER}&quot;)&#10;    private String registerUser;&#10;&#10;    @Value(&quot;${EXISTS_BY_EMAIL}&quot;)&#10;    private String existsByEmail;&#10;&#10;    // NEW: SQL queries for authentication and profile update&#10;    @Value(&quot;${AUTHENTICATE_USER}&quot;)&#10;    private String authenticateUser;&#10;&#10;    @Value(&quot;${UPDATE_USER_PROFILE}&quot;)&#10;    private String updateUserProfile;&#10;&#10;    private static final Logger logger = LogManager.getLogger(UserDAOImpl.class);&#10;&#10;&#10;&#10;    @Override&#10;    public UserDto findUserById(String userId) throws RuntimeException {&#10;        try {&#10;            System.out.println(&quot;HERE :::&quot;+userId);&#10;            return jdbcTemplate.queryForObject(&#10;                    findUserById,&#10;                    new Object[]{userId},&#10;                    new UserRowMapper()&#10;            );&#10;        } catch (EmptyResultDataAccessException e) {&#10;            logger.fatal(&quot;Error in findUserById :&quot;+e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public UserDto registerUser(User user) {&#10;        try {&#10;            int rows = jdbcTemplate.update(&#10;                    registerUser,&#10;                    user.getId(),&#10;                    user.getUsername(),&#10;                    user.getEmail(),&#10;                    user.getPassword(),&#10;                    user.getFullName(),&#10;                    user.getAddress(),&#10;                    user.getPhoneNumber(),&#10;                    user.isActive(),&#10;                    user.getRole().name()&#10;            );&#10;&#10;            if (rows &gt; 0) {&#10;                UserDto userDto = new UserDto();&#10;                userDto.setId(user.getId());&#10;                userDto.setUsername(user.getUsername());&#10;                userDto.setEmail(user.getEmail());&#10;                userDto.setPassword(user.getPassword());&#10;                userDto.setFullName(user.getFullName());&#10;                userDto.setAddress(user.getAddress());&#10;                userDto.setPhoneNumber(user.getPhoneNumber());&#10;                return userDto;&#10;            } else {&#10;                throw new RuntimeException(&quot;Failed to register user.&quot;);&#10;            }&#10;        }&#10;        catch(Exception e){&#10;            logger.fatal(&quot;Error in registerUser :&quot;+e);&#10;            throw e;&#10;        }&#10;&#10;    }&#10;&#10;    @Override&#10;    public boolean existsByEmail(String email) {&#10;        try {&#10;            return Boolean.TRUE.equals(&#10;                    jdbcTemplate.queryForObject(&#10;                            existsByEmail,&#10;                            new Object[]{email},&#10;                            Boolean.class&#10;                    )&#10;            );&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in existsByEmail :&quot;+e);&#10;            throw e;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.auction.userservice.dao.impl;&#10;&#10;import com.auction.userservice.constants.UserConstants;&#10;import com.auction.userservice.dao.UserDAO;&#10;import com.auction.userservice.dto.UserDto;&#10;import com.auction.userservice.model.User;&#10;import com.auction.userservice.rowmapper.UserRowMapper;&#10;import org.apache.logging.log4j.LogManager;&#10;import org.apache.logging.log4j.Logger;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.context.annotation.PropertySource;&#10;import org.springframework.dao.EmptyResultDataAccessException;&#10;import org.springframework.jdbc.core.JdbcTemplate;&#10;import org.springframework.stereotype.Repository;&#10;&#10;@Repository(UserConstants.USERDAOIMPL)&#10;@PropertySource(&quot;classpath:postgres.properties&quot;)&#10;public class UserDAOImpl implements UserDAO {&#10;&#10;    @Autowired&#10;    private JdbcTemplate jdbcTemplate;&#10;&#10;    @Value(&quot;${FIND_USER_BY_ID}&quot;)&#10;    private String findUserById;&#10;&#10;    @Value(&quot;${REGISTER_USER}&quot;)&#10;    private String registerUser;&#10;&#10;    @Value(&quot;${EXISTS_BY_EMAIL}&quot;)&#10;    private String existsByEmail;&#10;&#10;    // NEW: SQL queries for authentication and profile update&#10;    @Value(&quot;${AUTHENTICATE_USER}&quot;)&#10;    private String authenticateUser;&#10;&#10;    @Value(&quot;${UPDATE_USER_PROFILE}&quot;)&#10;    private String updateUserProfile;&#10;&#10;    private static final Logger logger = LogManager.getLogger(UserDAOImpl.class);&#10;&#10;&#10;&#10;    @Override&#10;    public UserDto findUserById(String userId) throws RuntimeException {&#10;        try {&#10;            System.out.println(&quot;HERE :::&quot;+userId);&#10;            return jdbcTemplate.queryForObject(&#10;                    findUserById,&#10;                    new Object[]{userId},&#10;                    new UserRowMapper()&#10;            );&#10;        } catch (EmptyResultDataAccessException e) {&#10;            logger.fatal(&quot;Error in findUserById :&quot;+e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public UserDto registerUser(User user) {&#10;        try {&#10;            int rows = jdbcTemplate.update(&#10;                    registerUser,&#10;                    user.getId(),&#10;                    user.getUsername(),&#10;                    user.getEmail(),&#10;                    user.getPassword(),&#10;                    user.getFullName(),&#10;                    user.getAddress(),&#10;                    user.getPhoneNumber(),&#10;                    user.isActive(),&#10;                    user.getRole().name()&#10;            );&#10;&#10;            if (rows &gt; 0) {&#10;                UserDto userDto = new UserDto();&#10;                userDto.setId(user.getId());&#10;                userDto.setUsername(user.getUsername());&#10;                userDto.setEmail(user.getEmail());&#10;                userDto.setPassword(user.getPassword());&#10;                userDto.setFullName(user.getFullName());&#10;                userDto.setAddress(user.getAddress());&#10;                userDto.setPhoneNumber(user.getPhoneNumber());&#10;                return userDto;&#10;            } else {&#10;                throw new RuntimeException(&quot;Failed to register user.&quot;);&#10;            }&#10;        }&#10;        catch(Exception e){&#10;            logger.fatal(&quot;Error in registerUser :&quot;+e);&#10;            throw e;&#10;        }&#10;&#10;    }&#10;&#10;    @Override&#10;    public boolean existsByEmail(String email) {&#10;        try {&#10;            return Boolean.TRUE.equals(&#10;                    jdbcTemplate.queryForObject(&#10;                            existsByEmail,&#10;                            new Object[]{email},&#10;                            Boolean.class&#10;                    )&#10;            );&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in existsByEmail :&quot;+e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    // NEW: Authentication method implementation&#10;    @Override&#10;    public UserDto authenticateUser(String username, String password) throws RuntimeException {&#10;        try {&#10;            return jdbcTemplate.queryForObject(&#10;                    authenticateUser,&#10;                    new Object[]{username, password},&#10;                    new UserRowMapper()&#10;            );&#10;        } catch (EmptyResultDataAccessException e) {&#10;            logger.fatal(&quot;Error in authenticateUser: Invalid credentials for user &quot; + username);&#10;            throw new RuntimeException(&quot;Invalid username or password&quot;);&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in authenticateUser: &quot; + e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    // NEW: Update user profile method implementation&#10;    @Override&#10;    public UserDto updateUserProfile(String userId, UserDto userDto) throws RuntimeException {&#10;        try {&#10;            int rows = jdbcTemplate.update(&#10;                    updateUserProfile,&#10;                    userDto.getFullName(),&#10;                    userDto.getEmail(),&#10;                    userDto.getAddress(),&#10;                    userDto.getPhoneNumber(),&#10;                    userId&#10;            );&#10;&#10;            if (rows &gt; 0) {&#10;                // Return updated user profile&#10;                return findUserById(userId);&#10;            } else {&#10;                throw new RuntimeException(&quot;Failed to update user profile.&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in updateUserProfile: &quot; + e);&#10;            throw e;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/userservice/src/main/java/com/auction/userservice/service/UserService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/userservice/src/main/java/com/auction/userservice/service/UserService.java" />
              <option name="originalContent" value="package com.auction.userservice.service;&#10;&#10;import com.auction.userservice.constants.UserConstants;&#10;import com.auction.userservice.dto.RegisterRequest;&#10;import com.auction.userservice.dto.UserDto;&#10;import org.springframework.stereotype.Service;&#10;&#10;&#10;public interface UserService {&#10;    UserDto getUserProfile(String userId);&#10;&#10;    UserDto registerUser(RegisterRequest request);&#10;}&#10;" />
              <option name="updatedContent" value="package com.auction.userservice.service;&#13;&#10;&#13;&#10;import com.auction.userservice.constants.UserConstants;&#13;&#10;import com.auction.userservice.dto.RegisterRequest;&#13;&#10;import com.auction.userservice.dto.UserDto;&#13;&#10;import org.springframework.stereotype.Service;&#13;&#10;&#13;&#10;&#13;&#10;public interface UserService {&#13;&#10;    UserDto getUserProfile(String userId);&#13;&#10;&#13;&#10;    UserDto registerUser(RegisterRequest request);&#13;&#10;    &#13;&#10;    // NEW: Authentication method for login&#13;&#10;    UserDto authenticateUser(String username, String password);&#13;&#10;    &#13;&#10;    // NEW: Update user profile method&#13;&#10;    UserDto updateUserProfile(String userId, UserDto userDto);&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/userservice/src/main/java/com/auction/userservice/service/impl/UserServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/userservice/src/main/java/com/auction/userservice/service/impl/UserServiceImpl.java" />
              <option name="originalContent" value="package com.auction.userservice.service.impl;&#10;&#10;import com.auction.userservice.constants.UserConstants;&#10;import com.auction.userservice.dao.UserDAO;&#10;import com.auction.userservice.dto.RegisterRequest;&#10;import com.auction.userservice.dto.UserDto;&#10;import com.auction.userservice.model.User;&#10;import com.auction.userservice.rowmapper.UserRowMapper;&#10;import com.auction.userservice.service.UserService;&#10;import org.apache.logging.log4j.LogManager;&#10;import org.apache.logging.log4j.Logger;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.beans.factory.annotation.Qualifier;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.UUID;&#10;&#10;@Service(UserConstants.USERSERVICEIMPL)&#10;public class UserServiceImpl implements UserService {&#10;&#10;    @Autowired&#10;    @Qualifier(UserConstants.USERDAOIMPL)&#10;    private UserDAO userDao;&#10;&#10;    private static final Logger logger = LogManager.getLogger(UserServiceImpl.class);&#10;&#10;&#10;    @Override&#10;    public UserDto getUserProfile(String userId) {&#10;        try {&#10;            return userDao.findUserById(userId);&#10;        } catch (RuntimeException e) {&#10;            logger.fatal(&quot;Error in getUserProfile :&quot;+e);&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public UserDto registerUser(RegisterRequest request) {&#10;&#10;        try {&#10;            if (userDao.existsByEmail(request.getEmail())) {&#10;&#10;                throw new RuntimeException();&#10;            }&#10;            User user = new User();&#10;            user.setId(UUID.randomUUID().toString());&#10;            user.setUsername(request.getUsername());&#10;            user.setEmail(request.getEmail());&#10;            user.setFullName(request.getFullName());&#10;            user.setPassword(request.getPassword());&#10;            user.setAddress(request.getAddress());&#10;            user.setPhoneNumber(request.getPhoneNumber());&#10;&#10;            return userDao.registerUser(user);&#10;        } catch (Exception e) {&#10;            logger.fatal(&quot;Error in registerUser :&quot;+e);&#10;            throw e;&#10;        }&#10;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.auction.userservice.service.impl;&#13;&#10;&#13;&#10;import com.auction.userservice.constants.UserConstants;&#13;&#10;import com.auction.userservice.dao.UserDAO;&#13;&#10;import com.auction.userservice.dto.RegisterRequest;&#13;&#10;import com.auction.userservice.dto.UserDto;&#13;&#10;import com.auction.userservice.model.User;&#13;&#10;import com.auction.userservice.rowmapper.UserRowMapper;&#13;&#10;import com.auction.userservice.service.UserService;&#13;&#10;import org.apache.logging.log4j.LogManager;&#13;&#10;import org.apache.logging.log4j.Logger;&#13;&#10;import org.springframework.beans.factory.annotation.Autowired;&#13;&#10;import org.springframework.beans.factory.annotation.Qualifier;&#13;&#10;import org.springframework.stereotype.Service;&#13;&#10;&#13;&#10;import java.util.UUID;&#13;&#10;&#13;&#10;@Service(UserConstants.USERSERVICEIMPL)&#13;&#10;public class UserServiceImpl implements UserService {&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    @Qualifier(UserConstants.USERDAOIMPL)&#13;&#10;    private UserDAO userDao;&#13;&#10;&#13;&#10;    private static final Logger logger = LogManager.getLogger(UserServiceImpl.class);&#13;&#10;&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public UserDto getUserProfile(String userId) {&#13;&#10;        try {&#13;&#10;            return userDao.findUserById(userId);&#13;&#10;        } catch (RuntimeException e) {&#13;&#10;            logger.fatal(&quot;Error in getUserProfile :&quot;+e);&#13;&#10;            throw e;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public UserDto registerUser(RegisterRequest request) {&#13;&#10;&#13;&#10;        try {&#13;&#10;            if (userDao.existsByEmail(request.getEmail())) {&#13;&#10;&#13;&#10;                throw new RuntimeException();&#13;&#10;            }&#13;&#10;            User user = new User();&#13;&#10;            user.setId(UUID.randomUUID().toString());&#13;&#10;            user.setUsername(request.getUsername());&#13;&#10;            user.setEmail(request.getEmail());&#13;&#10;            user.setFullName(request.getFullName());&#13;&#10;            user.setPassword(request.getPassword());&#13;&#10;            user.setAddress(request.getAddress());&#13;&#10;            user.setPhoneNumber(request.getPhoneNumber());&#13;&#10;&#13;&#10;            return userDao.registerUser(user);&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in registerUser :&quot;+e);&#13;&#10;            throw e;&#13;&#10;        }&#13;&#10;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public UserDto authenticateUser(String username, String password) {&#13;&#10;        try {&#13;&#10;            return userDao.authenticateUser(username, password);&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in authenticateUser: &quot; + e);&#13;&#10;            throw e;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public UserDto updateUserProfile(String userId, UserDto userDto) {&#13;&#10;        try {&#13;&#10;            return userDao.updateUserProfile(userId, userDto);&#13;&#10;        } catch (Exception e) {&#13;&#10;            logger.fatal(&quot;Error in updateUserProfile: &quot; + e);&#13;&#10;            throw e;&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/userservice/src/main/resources/postgres.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/userservice/src/main/resources/postgres.properties" />
              <option name="originalContent" value="FIND_USER_BY_ID=SELECT * FROM users WHERE id=?&#10;EXISTS_BY_EMAIL=SELECT COUNT(*) &gt; 0 FROM users WHERE email = ?&#10;REGISTER_USER= INSERT INTO users ( id, username, email, password, full_name, address, phone_number, is_active, role, created_at, updated_at ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP );&#10;" />
              <option name="updatedContent" value="FIND_USER_BY_ID=SELECT * FROM users WHERE id=?&#13;&#10;EXISTS_BY_EMAIL=SELECT COUNT(*) &gt; 0 FROM users WHERE email = ?&#13;&#10;REGISTER_USER= INSERT INTO users ( id, username, email, password, full_name, address, phone_number, is_active, role, created_at, updated_at ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP );&#13;&#10;&#13;&#10;# NEW: SQL queries for authentication and profile update&#13;&#10;AUTHENTICATE_USER=SELECT * FROM users WHERE username = ? AND password = ? AND is_active = true&#13;&#10;UPDATE_USER_PROFILE=UPDATE users SET full_name = ?, email = ?, address = ?, phone_number = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>